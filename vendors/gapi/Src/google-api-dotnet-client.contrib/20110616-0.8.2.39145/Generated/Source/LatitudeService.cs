//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Google.Apis.Latitude.V1.Data {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    
    
    /// <summary>A Location Resource identifies a user&apos;s position at a particular time. It may include metadata about the user&apos;s position, such as a venue if the location was recorded at the time of a check-in.</summary>
    public class LatitudeCurrentlocationResourceJson : Google.Apis.Requests.IResponse {
        
        private string accuracy;
        
        private string activityId;
        
        private string altitude;
        
        private string altitudeAccuracy;
        
        private string heading;
        
        private string kind;
        
        private string latitude;
        
        private string longitude;
        
        private string placeid;
        
        private string speed;
        
        private string timestampMs;
        
        private Google.Apis.Requests.RequestError error;
        
        /// <summary>Accuracy of the latitude and longitude coordinates, in non-negative meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accuracy")]
        public virtual string Accuracy {
            get {
                return this.accuracy;
            }
            set {
                this.accuracy = value;
            }
        }
        
        /// <summary>Unique ID of the Buzz message that corresponds to the check-in associated with this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("activityId")]
        public virtual string ActivityId {
            get {
                return this.activityId;
            }
            set {
                this.activityId = value;
            }
        }
        
        /// <summary>Altitude of the location, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitude")]
        public virtual string Altitude {
            get {
                return this.altitude;
            }
            set {
                this.altitude = value;
            }
        }
        
        /// <summary>Accuracy of the altitude value, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitudeAccuracy")]
        public virtual string AltitudeAccuracy {
            get {
                return this.altitudeAccuracy;
            }
            set {
                this.altitudeAccuracy = value;
            }
        }
        
        /// <summary>Direction of travel of the user when this location was recorded. In degrees, clockwise relative to true north. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("heading")]
        public virtual string Heading {
            get {
                return this.heading;
            }
            set {
                this.heading = value;
            }
        }
        
        /// <summary>Kind of this item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Latitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latitude")]
        public virtual string Latitude {
            get {
                return this.latitude;
            }
            set {
                this.latitude = value;
            }
        }
        
        /// <summary>Longitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("longitude")]
        public virtual string Longitude {
            get {
                return this.longitude;
            }
            set {
                this.longitude = value;
            }
        }
        
        /// <summary>Unique ID of the venue that corresponds to this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("placeid")]
        public virtual string Placeid {
            get {
                return this.placeid;
            }
            set {
                this.placeid = value;
            }
        }
        
        /// <summary>Ground speed of the user at the time this location was recorded, in meters per second. Non-negative. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("speed")]
        public virtual string Speed {
            get {
                return this.speed;
            }
            set {
                this.speed = value;
            }
        }
        
        /// <summary>Timestamp of the Location Resource, in milliseconds since the epoch (UTC). This is also the Location Resource&apos;s unique id.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timestampMs")]
        public virtual string TimestampMs {
            get {
                return this.timestampMs;
            }
            set {
                this.timestampMs = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
    
    /// <summary>A Location Resource identifies a user&apos;s position at a particular time. It may include metadata about the user&apos;s position, such as a venue if the location was recorded at the time of a check-in.</summary>
    public class Location : Google.Apis.Requests.IResponse {
        
        private string accuracy;
        
        private string activityId;
        
        private string altitude;
        
        private string altitudeAccuracy;
        
        private string heading;
        
        private string kind;
        
        private string latitude;
        
        private string longitude;
        
        private string placeid;
        
        private string speed;
        
        private string timestampMs;
        
        private Google.Apis.Requests.RequestError error;
        
        /// <summary>Accuracy of the latitude and longitude coordinates, in non-negative meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accuracy")]
        public virtual string Accuracy {
            get {
                return this.accuracy;
            }
            set {
                this.accuracy = value;
            }
        }
        
        /// <summary>Unique ID of the Buzz message that corresponds to the check-in associated with this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("activityId")]
        public virtual string ActivityId {
            get {
                return this.activityId;
            }
            set {
                this.activityId = value;
            }
        }
        
        /// <summary>Altitude of the location, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitude")]
        public virtual string Altitude {
            get {
                return this.altitude;
            }
            set {
                this.altitude = value;
            }
        }
        
        /// <summary>Accuracy of the altitude value, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitudeAccuracy")]
        public virtual string AltitudeAccuracy {
            get {
                return this.altitudeAccuracy;
            }
            set {
                this.altitudeAccuracy = value;
            }
        }
        
        /// <summary>Direction of travel of the user when this location was recorded. In degrees, clockwise relative to true north. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("heading")]
        public virtual string Heading {
            get {
                return this.heading;
            }
            set {
                this.heading = value;
            }
        }
        
        /// <summary>Kind of this item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Latitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latitude")]
        public virtual string Latitude {
            get {
                return this.latitude;
            }
            set {
                this.latitude = value;
            }
        }
        
        /// <summary>Longitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("longitude")]
        public virtual string Longitude {
            get {
                return this.longitude;
            }
            set {
                this.longitude = value;
            }
        }
        
        /// <summary>Unique ID of the venue that corresponds to this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("placeid")]
        public virtual string Placeid {
            get {
                return this.placeid;
            }
            set {
                this.placeid = value;
            }
        }
        
        /// <summary>Ground speed of the user at the time this location was recorded, in meters per second. Non-negative. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("speed")]
        public virtual string Speed {
            get {
                return this.speed;
            }
            set {
                this.speed = value;
            }
        }
        
        /// <summary>Timestamp of the Location Resource, in milliseconds since the epoch (UTC). This is also the Location Resource&apos;s unique id.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timestampMs")]
        public virtual string TimestampMs {
            get {
                return this.timestampMs;
            }
            set {
                this.timestampMs = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
    
    public class LocationFeed : Google.Apis.Requests.IResponse {
        
        private IList<Location> items;
        
        private string kind;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Location> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
}
namespace Google.Apis.Latitude.V1 {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public class LatitudeService : Google.Apis.Discovery.IRequestExecutor, Google.Apis.Discovery.ISchemaAwareRequestExecutor {
        
        private Google.Apis.Discovery.IService genericService;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Version = "v1";
        
        private const string Name = "latitude";
        
        private const string BaseUri = "https://www.googleapis.com//latitude/v1/";
        
        private const Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_1_0;
        
        private string developerKey;
        
        private CurrentLocationResource currentLocation;
        
        private LocationResource location;
        
        public LatitudeService(Google.Apis.Discovery.IService genericService, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.genericService = genericService;
            this.authenticator = authenticator;
            this.currentLocation = new CurrentLocationResource(this);
            this.location = new LocationResource(this);
        }
        
        public LatitudeService() : 
                this(new Google.Apis.Discovery.DiscoveryService(new Google.Apis.Discovery.WebDiscoveryDevice(new System.Uri(string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", LatitudeService.Name, LatitudeService.Version)))).GetService(LatitudeService.Version, LatitudeService.DiscoveryVersionUsed, new Google.Apis.Discovery.FactoryParameterV1_0(new System.Uri(LatitudeService.BaseUri))), Google.Apis.Authentication.AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {
        }
        
        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey {
            get {
                return this.developerKey;
            }
            set {
                this.developerKey = value;
            }
        }
        
        public virtual CurrentLocationResource CurrentLocation {
            get {
                return this.currentLocation;
            }
        }
        
        public virtual LocationResource Location {
            get {
                return this.location;
            }
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, string body, System.Collections.Generic.IDictionary<string, object> parameters) {
            Google.Apis.Requests.IRequest request = this.genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false) {
                request = request.WithDeveloperKey(this.DeveloperKey);
            }
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, object body, System.Collections.Generic.IDictionary<string, object> parameters) {
            return this.ExecuteRequest(resource, method, this.ObjectToJson(body), parameters);
        }
        
        public virtual void RegisterSerializer(Google.Apis.ISerializer serializer) {
            genericService.Serializer = serializer;
        }
        
        public virtual string ObjectToJson(object obj) {
            return genericService.SerializeRequest(obj);
        }
        
        public virtual T JsonToObject<T>(System.IO.Stream stream)
         {
            return genericService.DeserializeResponse<T>(stream);
        }
    }
    
    public class CurrentLocationResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "currentLocation";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(CurrentLocationResource));
        
        public CurrentLocationResource(LatitudeService service) {
            this.service = service;
        }
        
        /// <summary>Deletes the authenticated user&apos;s current location.</summary>
        public virtual System.IO.Stream DeleteAsStream() {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            logger.Debug("Executing currentLocation.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(CurrentLocationResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing currentLocation.delete");
            return ret;
        }
        
        /// <summary>Returns the authenticated user&apos;s current location.</summary>
        /// <param name="granularity">Optional - Granularity of the requested location.</param>
        public virtual System.IO.Stream GetAsStream(string granularity) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["granularity"] = granularity;
            logger.Debug("Executing currentLocation.get");
            System.IO.Stream ret = this.service.ExecuteRequest(CurrentLocationResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing currentLocation.get");
            return ret;
        }
        
        /// <summary>Updates or creates the user&apos;s current location.</summary>
        public virtual System.IO.Stream InsertAsStream(string body) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            logger.Debug("Executing currentLocation.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(CurrentLocationResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing currentLocation.insert");
            return ret;
        }
        
        /// <summary>Deletes the authenticated user&apos;s current location.</summary>
        public virtual System.IO.Stream Delete() {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            logger.Debug("Executing currentLocation.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(CurrentLocationResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing currentLocation.delete");
            return ret;
        }
        
        /// <summary>Returns the authenticated user&apos;s current location.</summary>
        /// <param name="granularity">Optional - Granularity of the requested location.</param>
        public virtual Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson Get(string granularity) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["granularity"] = granularity;
            logger.Debug("Executing currentLocation.get");
            Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson ret = this.service.JsonToObject<Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson>(this.service.ExecuteRequest(CurrentLocationResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing currentLocation.get");
            return ret;
        }
        
        /// <summary>Updates or creates the user&apos;s current location.</summary>
        public virtual Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson Insert(Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson body) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            logger.Debug("Executing currentLocation.insert");
            Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson ret = this.service.JsonToObject<Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson>(this.service.ExecuteRequest(CurrentLocationResource.Resource, "insert", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing currentLocation.insert");
            return ret;
        }
        
        /// <summary>Returns the authenticated user&apos;s current location.</summary>
        public virtual System.IO.Stream Get(System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            logger.Debug("Executing currentLocation.get");
            System.IO.Stream ret = this.service.ExecuteRequest(CurrentLocationResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing currentLocation.get");
            return ret;
        }
    }
    
    public class LocationResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "location";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LocationResource));
        
        public LocationResource(LatitudeService service) {
            this.service = service;
        }
        
        /// <summary>Deletes a location from the user&apos;s location history.</summary>
        /// <param name="locationId">Required - Timestamp of the location to delete (ms since epoch).</param>
        public virtual System.IO.Stream DeleteAsStream(string locationId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["locationId"] = locationId;
            logger.Debug("Executing location.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(LocationResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing location.delete");
            return ret;
        }
        
        /// <summary>Reads a location from the user&apos;s location history.</summary>
        /// <param name="locationId">Required - Timestamp of the location to read (ms since epoch).</param>
        /// <param name="granularity">Optional - Granularity of the location to return.</param>
        public virtual System.IO.Stream GetAsStream(string locationId, string granularity) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["locationId"] = locationId;
            parameters["granularity"] = granularity;
            logger.Debug("Executing location.get");
            System.IO.Stream ret = this.service.ExecuteRequest(LocationResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing location.get");
            return ret;
        }
        
        /// <summary>Inserts or updates a location in the user&apos;s location history.</summary>
        public virtual System.IO.Stream InsertAsStream(string body) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            logger.Debug("Executing location.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(LocationResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing location.insert");
            return ret;
        }
        
        /// <summary>Lists the user&apos;s location history.</summary>
        /// <param name="granularity">Optional - Granularity of the requested locations.</param>
        /// <param name="maxResults">max-results - Optional - Maximum number of locations to return.</param>
        /// <param name="maxTime">max-time - Optional - Maximum timestamp of locations to return (ms since epoch).</param>
        /// <param name="minTime">min-time - Optional - Minimum timestamp of locations to return (ms since epoch).</param>
        public virtual System.IO.Stream ListAsStream(string granularity, string maxResults, string maxTime, string minTime) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["granularity"] = granularity;
            parameters["max-results"] = maxResults;
            parameters["max-time"] = maxTime;
            parameters["min-time"] = minTime;
            logger.Debug("Executing location.list");
            System.IO.Stream ret = this.service.ExecuteRequest(LocationResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing location.list");
            return ret;
        }
        
        /// <summary>Deletes a location from the user&apos;s location history.</summary>
        /// <param name="locationId">Required - Timestamp of the location to delete (ms since epoch).</param>
        public virtual System.IO.Stream Delete(string locationId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["locationId"] = locationId;
            logger.Debug("Executing location.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(LocationResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing location.delete");
            return ret;
        }
        
        /// <summary>Reads a location from the user&apos;s location history.</summary>
        /// <param name="locationId">Required - Timestamp of the location to read (ms since epoch).</param>
        /// <param name="granularity">Optional - Granularity of the location to return.</param>
        public virtual Google.Apis.Latitude.V1.Data.Location Get(string locationId, string granularity) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["locationId"] = locationId;
            parameters["granularity"] = granularity;
            logger.Debug("Executing location.get");
            Google.Apis.Latitude.V1.Data.Location ret = this.service.JsonToObject<Google.Apis.Latitude.V1.Data.Location>(this.service.ExecuteRequest(LocationResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing location.get");
            return ret;
        }
        
        /// <summary>Inserts or updates a location in the user&apos;s location history.</summary>
        public virtual Google.Apis.Latitude.V1.Data.Location Insert(Google.Apis.Latitude.V1.Data.Location body) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            logger.Debug("Executing location.insert");
            Google.Apis.Latitude.V1.Data.Location ret = this.service.JsonToObject<Google.Apis.Latitude.V1.Data.Location>(this.service.ExecuteRequest(LocationResource.Resource, "insert", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing location.insert");
            return ret;
        }
        
        /// <summary>Lists the user&apos;s location history.</summary>
        /// <param name="granularity">Optional - Granularity of the requested locations.</param>
        /// <param name="maxResults">max-results - Optional - Maximum number of locations to return.</param>
        /// <param name="maxTime">max-time - Optional - Maximum timestamp of locations to return (ms since epoch).</param>
        /// <param name="minTime">min-time - Optional - Minimum timestamp of locations to return (ms since epoch).</param>
        public virtual Google.Apis.Latitude.V1.Data.LocationFeed List(string granularity, string maxResults, string maxTime, string minTime) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["granularity"] = granularity;
            parameters["max-results"] = maxResults;
            parameters["max-time"] = maxTime;
            parameters["min-time"] = minTime;
            logger.Debug("Executing location.list");
            Google.Apis.Latitude.V1.Data.LocationFeed ret = this.service.JsonToObject<Google.Apis.Latitude.V1.Data.LocationFeed>(this.service.ExecuteRequest(LocationResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing location.list");
            return ret;
        }
        
        /// <summary>Reads a location from the user&apos;s location history.</summary>
        /// <param name="locationIdValue">locationId - Required - Timestamp of the location to read (ms since epoch).</param>
        public virtual System.IO.Stream Get(string locationId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["locationId"] = locationId;
            logger.Debug("Executing location.get");
            System.IO.Stream ret = this.service.ExecuteRequest(LocationResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing location.get");
            return ret;
        }
        
        /// <summary>Lists the user&apos;s location history.</summary>
        public virtual System.IO.Stream List(System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            logger.Debug("Executing location.list");
            System.IO.Stream ret = this.service.ExecuteRequest(LocationResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing location.list");
            return ret;
        }
    }
}
