//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Google.Apis.Buzz.V1.Data {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    
    
    public class Activity : Google.Apis.Requests.IResponse {
        
        private ActorData actor;
        
        private string address;
        
        private string annotation;
        
        private IList<CategoriesData> categories;
        
        private string crosspostSource;
        
        private string detectedlLang;
        
        private string geocode;
        
        private string id;
        
        private string kind;
        
        private LinksData links;
        
        private ObjectData objectValue;
        
        private string placeId;
        
        private string placeName;
        
        private string placeholder;
        
        private string published;
        
        private string radius;
        
        private SourceData source;
        
        private string targetLang;
        
        private string title;
        
        private string untranslatedTitle;
        
        private string updated;
        
        private IList<System.String> verbs;
        
        private VisibilityData visibility;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("actor")]
        public virtual ActorData Actor {
            get {
                return this.actor;
            }
            set {
                this.actor = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("address")]
        public virtual string Address {
            get {
                return this.address;
            }
            set {
                this.address = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("annotation")]
        public virtual string Annotation {
            get {
                return this.annotation;
            }
            set {
                this.annotation = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("categories")]
        public virtual IList<CategoriesData> Categories {
            get {
                return this.categories;
            }
            set {
                this.categories = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("crosspostSource")]
        public virtual string CrosspostSource {
            get {
                return this.crosspostSource;
            }
            set {
                this.crosspostSource = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("detectedlLang")]
        public virtual string DetectedlLang {
            get {
                return this.detectedlLang;
            }
            set {
                this.detectedlLang = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("geocode")]
        public virtual string Geocode {
            get {
                return this.geocode;
            }
            set {
                this.geocode = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("object")]
        public virtual ObjectData Object {
            get {
                return this.objectValue;
            }
            set {
                this.objectValue = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("placeId")]
        public virtual string PlaceId {
            get {
                return this.placeId;
            }
            set {
                this.placeId = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("placeName")]
        public virtual string PlaceName {
            get {
                return this.placeName;
            }
            set {
                this.placeName = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("placeholder")]
        public virtual string Placeholder {
            get {
                return this.placeholder;
            }
            set {
                this.placeholder = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("published")]
        public virtual string Published {
            get {
                return this.published;
            }
            set {
                this.published = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("radius")]
        public virtual string Radius {
            get {
                return this.radius;
            }
            set {
                this.radius = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("source")]
        public virtual SourceData Source {
            get {
                return this.source;
            }
            set {
                this.source = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("targetLang")]
        public virtual string TargetLang {
            get {
                return this.targetLang;
            }
            set {
                this.targetLang = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("untranslatedTitle")]
        public virtual string UntranslatedTitle {
            get {
                return this.untranslatedTitle;
            }
            set {
                this.untranslatedTitle = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("verbs")]
        public virtual IList<System.String> Verbs {
            get {
                return this.verbs;
            }
            set {
                this.verbs = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("visibility")]
        public virtual VisibilityData Visibility {
            get {
                return this.visibility;
            }
            set {
                this.visibility = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class ActorData {
            
            private string id;
            
            private string name;
            
            private string profileUrl;
            
            private string thumbnailUrl;
            
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id {
                get {
                    return this.id;
                }
                set {
                    this.id = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("name")]
            public virtual string Name {
                get {
                    return this.name;
                }
                set {
                    this.name = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("profileUrl")]
            public virtual string ProfileUrl {
                get {
                    return this.profileUrl;
                }
                set {
                    this.profileUrl = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("thumbnailUrl")]
            public virtual string ThumbnailUrl {
                get {
                    return this.thumbnailUrl;
                }
                set {
                    this.thumbnailUrl = value;
                }
            }
        }
        
        public class CategoriesData {
            
            private string label;
            
            private string schema;
            
            private string term;
            
            [Newtonsoft.Json.JsonPropertyAttribute("label")]
            public virtual string Label {
                get {
                    return this.label;
                }
                set {
                    this.label = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("schema")]
            public virtual string Schema {
                get {
                    return this.schema;
                }
                set {
                    this.schema = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("term")]
            public virtual string Term {
                get {
                    return this.term;
                }
                set {
                    this.term = value;
                }
            }
        }
        
        public class LinksData {
            
            private IList<LikedData> liked;
            
            [Newtonsoft.Json.JsonPropertyAttribute("liked")]
            public virtual IList<LikedData> Liked {
                get {
                    return this.liked;
                }
                set {
                    this.liked = value;
                }
            }
            
            public class LikedData {
                
                private long count;
                
                private string href;
                
                private string type;
                
                [Newtonsoft.Json.JsonPropertyAttribute("count")]
                public virtual long Count {
                    get {
                        return this.count;
                    }
                    set {
                        this.count = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("href")]
                public virtual string Href {
                    get {
                        return this.href;
                    }
                    set {
                        this.href = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("type")]
                public virtual string Type {
                    get {
                        return this.type;
                    }
                    set {
                        this.type = value;
                    }
                }
            }
        }
        
        public class ObjectData {
            
            private ActorData actor;
            
            private IList<AttachmentsData> attachments;
            
            private IList<Comment> comments;
            
            private string content;
            
            private string detectedlLang;
            
            private string id;
            
            private IList<Person> liked;
            
            private LinksData links;
            
            private string originalContent;
            
            private Activity shareOriginal;
            
            private string targetLang;
            
            private string type;
            
            private string untranslatedContent;
            
            [Newtonsoft.Json.JsonPropertyAttribute("actor")]
            public virtual ActorData Actor {
                get {
                    return this.actor;
                }
                set {
                    this.actor = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("attachments")]
            public virtual IList<AttachmentsData> Attachments {
                get {
                    return this.attachments;
                }
                set {
                    this.attachments = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("comments")]
            public virtual IList<Comment> Comments {
                get {
                    return this.comments;
                }
                set {
                    this.comments = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("content")]
            public virtual string Content {
                get {
                    return this.content;
                }
                set {
                    this.content = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("detectedlLang")]
            public virtual string DetectedlLang {
                get {
                    return this.detectedlLang;
                }
                set {
                    this.detectedlLang = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id {
                get {
                    return this.id;
                }
                set {
                    this.id = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("liked")]
            public virtual IList<Person> Liked {
                get {
                    return this.liked;
                }
                set {
                    this.liked = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("links")]
            public virtual LinksData Links {
                get {
                    return this.links;
                }
                set {
                    this.links = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("originalContent")]
            public virtual string OriginalContent {
                get {
                    return this.originalContent;
                }
                set {
                    this.originalContent = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("shareOriginal")]
            public virtual Activity ShareOriginal {
                get {
                    return this.shareOriginal;
                }
                set {
                    this.shareOriginal = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("targetLang")]
            public virtual string TargetLang {
                get {
                    return this.targetLang;
                }
                set {
                    this.targetLang = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("untranslatedContent")]
            public virtual string UntranslatedContent {
                get {
                    return this.untranslatedContent;
                }
                set {
                    this.untranslatedContent = value;
                }
            }
            
            public class ActorData {
                
                private string id;
                
                private string name;
                
                private string profileUrl;
                
                private string thumbnailUrl;
                
                [Newtonsoft.Json.JsonPropertyAttribute("id")]
                public virtual string Id {
                    get {
                        return this.id;
                    }
                    set {
                        this.id = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("name")]
                public virtual string Name {
                    get {
                        return this.name;
                    }
                    set {
                        this.name = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("profileUrl")]
                public virtual string ProfileUrl {
                    get {
                        return this.profileUrl;
                    }
                    set {
                        this.profileUrl = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("thumbnailUrl")]
                public virtual string ThumbnailUrl {
                    get {
                        return this.thumbnailUrl;
                    }
                    set {
                        this.thumbnailUrl = value;
                    }
                }
            }
            
            public class AttachmentsData {
                
                private string content;
                
                private string id;
                
                private LinksData links;
                
                private string title;
                
                private string type;
                
                [Newtonsoft.Json.JsonPropertyAttribute("content")]
                public virtual string Content {
                    get {
                        return this.content;
                    }
                    set {
                        this.content = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("id")]
                public virtual string Id {
                    get {
                        return this.id;
                    }
                    set {
                        this.id = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("links")]
                public virtual LinksData Links {
                    get {
                        return this.links;
                    }
                    set {
                        this.links = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("title")]
                public virtual string Title {
                    get {
                        return this.title;
                    }
                    set {
                        this.title = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("type")]
                public virtual string Type {
                    get {
                        return this.type;
                    }
                    set {
                        this.type = value;
                    }
                }
                
                public class LinksData {
                }
            }
            
            public class LinksData {
            }
        }
        
        public class SourceData {
            
            private string title;
            
            [Newtonsoft.Json.JsonPropertyAttribute("title")]
            public virtual string Title {
                get {
                    return this.title;
                }
                set {
                    this.title = value;
                }
            }
        }
        
        public class VisibilityData {
            
            private IList<EntriesData> entries;
            
            [Newtonsoft.Json.JsonPropertyAttribute("entries")]
            public virtual IList<EntriesData> Entries {
                get {
                    return this.entries;
                }
                set {
                    this.entries = value;
                }
            }
            
            public class EntriesData {
                
                private string id;
                
                private string title;
                
                [Newtonsoft.Json.JsonPropertyAttribute("id")]
                public virtual string Id {
                    get {
                        return this.id;
                    }
                    set {
                        this.id = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("title")]
                public virtual string Title {
                    get {
                        return this.title;
                    }
                    set {
                        this.title = value;
                    }
                }
            }
        }
    }
    
    public class ActivityFeed : Google.Apis.Requests.IResponse {
        
        private string id;
        
        private IList<Activity> items;
        
        private string kind;
        
        private LinksData links;
        
        private string title;
        
        private string updated;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Activity> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class LinksData {
        }
    }
    
    public class Album : Google.Apis.Requests.IResponse {
        
        private string created;
        
        private string description;
        
        private string firstPhotoId;
        
        private string id;
        
        private string kind;
        
        private string lastModified;
        
        private LinksData links;
        
        private OwnerData owner;
        
        private IList<System.String> tags;
        
        private string title;
        
        private string version;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("created")]
        public virtual string Created {
            get {
                return this.created;
            }
            set {
                this.created = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description {
            get {
                return this.description;
            }
            set {
                this.description = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("firstPhotoId")]
        public virtual string FirstPhotoId {
            get {
                return this.firstPhotoId;
            }
            set {
                this.firstPhotoId = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("lastModified")]
        public virtual string LastModified {
            get {
                return this.lastModified;
            }
            set {
                this.lastModified = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("owner")]
        public virtual OwnerData Owner {
            get {
                return this.owner;
            }
            set {
                this.owner = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("tags")]
        public virtual IList<System.String> Tags {
            get {
                return this.tags;
            }
            set {
                this.tags = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public virtual string Version {
            get {
                return this.version;
            }
            set {
                this.version = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class LinksData {
            
            private Link alternate;
            
            private Link enclosure;
            
            [Newtonsoft.Json.JsonPropertyAttribute("alternate")]
            public virtual Link Alternate {
                get {
                    return this.alternate;
                }
                set {
                    this.alternate = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("enclosure")]
            public virtual Link Enclosure {
                get {
                    return this.enclosure;
                }
                set {
                    this.enclosure = value;
                }
            }
        }
        
        public class OwnerData {
            
            private string id;
            
            private string name;
            
            private string profileUrl;
            
            private string thumbnailUrl;
            
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id {
                get {
                    return this.id;
                }
                set {
                    this.id = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("name")]
            public virtual string Name {
                get {
                    return this.name;
                }
                set {
                    this.name = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("profileUrl")]
            public virtual string ProfileUrl {
                get {
                    return this.profileUrl;
                }
                set {
                    this.profileUrl = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("thumbnailUrl")]
            public virtual string ThumbnailUrl {
                get {
                    return this.thumbnailUrl;
                }
                set {
                    this.thumbnailUrl = value;
                }
            }
        }
    }
    
    public class AlbumLite : Google.Apis.Requests.IResponse {
        
        private CollectionData collection;
        
        private string kind;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("collection")]
        public virtual CollectionData Collection {
            get {
                return this.collection;
            }
            set {
                this.collection = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class CollectionData {
            
            private string album;
            
            private string albumId;
            
            private PhotoData photo;
            
            [Newtonsoft.Json.JsonPropertyAttribute("album")]
            public virtual string Album {
                get {
                    return this.album;
                }
                set {
                    this.album = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("albumId")]
            public virtual string AlbumId {
                get {
                    return this.albumId;
                }
                set {
                    this.albumId = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("photo")]
            public virtual PhotoData Photo {
                get {
                    return this.photo;
                }
                set {
                    this.photo = value;
                }
            }
            
            public class PhotoData {
                
                private string photoUrl;
                
                [Newtonsoft.Json.JsonPropertyAttribute("photoUrl")]
                public virtual string PhotoUrl {
                    get {
                        return this.photoUrl;
                    }
                    set {
                        this.photoUrl = value;
                    }
                }
            }
        }
    }
    
    public class AlbumsFeed : Google.Apis.Requests.IResponse {
        
        private IList<Album> items;
        
        private string kind;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Album> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
    
    public class ChiliPhotosResourceJson : Google.Apis.Requests.IResponse {
        
        private AlbumData album;
        
        private string created;
        
        private string description;
        
        private string fileSize;
        
        private string id;
        
        private string kind;
        
        private string lastModified;
        
        private LinksData links;
        
        private OwnerData owner;
        
        private double timestamp;
        
        private string title;
        
        private string version;
        
        private Video video;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("album")]
        public virtual AlbumData Album {
            get {
                return this.album;
            }
            set {
                this.album = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("created")]
        public virtual string Created {
            get {
                return this.created;
            }
            set {
                this.created = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description {
            get {
                return this.description;
            }
            set {
                this.description = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("fileSize")]
        public virtual string FileSize {
            get {
                return this.fileSize;
            }
            set {
                this.fileSize = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("lastModified")]
        public virtual string LastModified {
            get {
                return this.lastModified;
            }
            set {
                this.lastModified = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("owner")]
        public virtual OwnerData Owner {
            get {
                return this.owner;
            }
            set {
                this.owner = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("timestamp")]
        public virtual double Timestamp {
            get {
                return this.timestamp;
            }
            set {
                this.timestamp = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public virtual string Version {
            get {
                return this.version;
            }
            set {
                this.version = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("video")]
        public virtual Video Video {
            get {
                return this.video;
            }
            set {
                this.video = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class AlbumData {
            
            private string id;
            
            private Link page_link;
            
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id {
                get {
                    return this.id;
                }
                set {
                    this.id = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("page_link")]
            public virtual Link Page_link {
                get {
                    return this.page_link;
                }
                set {
                    this.page_link = value;
                }
            }
        }
        
        public class LinksData {
            
            private IList<Link> alternate;
            
            [Newtonsoft.Json.JsonPropertyAttribute("alternate")]
            public virtual IList<Link> Alternate {
                get {
                    return this.alternate;
                }
                set {
                    this.alternate = value;
                }
            }
        }
        
        public class OwnerData {
            
            private string id;
            
            private string name;
            
            private string profileUrl;
            
            private string thumbnailUrl;
            
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id {
                get {
                    return this.id;
                }
                set {
                    this.id = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("name")]
            public virtual string Name {
                get {
                    return this.name;
                }
                set {
                    this.name = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("profileUrl")]
            public virtual string ProfileUrl {
                get {
                    return this.profileUrl;
                }
                set {
                    this.profileUrl = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("thumbnailUrl")]
            public virtual string ThumbnailUrl {
                get {
                    return this.thumbnailUrl;
                }
                set {
                    this.thumbnailUrl = value;
                }
            }
        }
    }
    
    public class Comment : Google.Apis.Requests.IResponse {
        
        private ActorData actor;
        
        private string content;
        
        private string detectedLang;
        
        private string id;
        
        private string kind;
        
        private LinksData links;
        
        private string originalContent;
        
        private string placeholder;
        
        private string published;
        
        private string targetLang;
        
        private string untranslatedContent;
        
        private string updated;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("actor")]
        public virtual ActorData Actor {
            get {
                return this.actor;
            }
            set {
                this.actor = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("content")]
        public virtual string Content {
            get {
                return this.content;
            }
            set {
                this.content = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("detectedLang")]
        public virtual string DetectedLang {
            get {
                return this.detectedLang;
            }
            set {
                this.detectedLang = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("originalContent")]
        public virtual string OriginalContent {
            get {
                return this.originalContent;
            }
            set {
                this.originalContent = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("placeholder")]
        public virtual string Placeholder {
            get {
                return this.placeholder;
            }
            set {
                this.placeholder = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("published")]
        public virtual string Published {
            get {
                return this.published;
            }
            set {
                this.published = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("targetLang")]
        public virtual string TargetLang {
            get {
                return this.targetLang;
            }
            set {
                this.targetLang = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("untranslatedContent")]
        public virtual string UntranslatedContent {
            get {
                return this.untranslatedContent;
            }
            set {
                this.untranslatedContent = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class ActorData {
            
            private string id;
            
            private string name;
            
            private string profileUrl;
            
            private string thumbnailUrl;
            
            [Newtonsoft.Json.JsonPropertyAttribute("id")]
            public virtual string Id {
                get {
                    return this.id;
                }
                set {
                    this.id = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("name")]
            public virtual string Name {
                get {
                    return this.name;
                }
                set {
                    this.name = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("profileUrl")]
            public virtual string ProfileUrl {
                get {
                    return this.profileUrl;
                }
                set {
                    this.profileUrl = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("thumbnailUrl")]
            public virtual string ThumbnailUrl {
                get {
                    return this.thumbnailUrl;
                }
                set {
                    this.thumbnailUrl = value;
                }
            }
        }
        
        public class LinksData {
            
            private IList<InReplyToData> inReplyTo;
            
            [Newtonsoft.Json.JsonPropertyAttribute("inReplyTo")]
            public virtual IList<InReplyToData> InReplyTo {
                get {
                    return this.inReplyTo;
                }
                set {
                    this.inReplyTo = value;
                }
            }
            
            public class InReplyToData {
                
                private string href;
                
                private string refValue;
                
                private string source;
                
                [Newtonsoft.Json.JsonPropertyAttribute("href")]
                public virtual string Href {
                    get {
                        return this.href;
                    }
                    set {
                        this.href = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("ref")]
                public virtual string Ref {
                    get {
                        return this.refValue;
                    }
                    set {
                        this.refValue = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("source")]
                public virtual string Source {
                    get {
                        return this.source;
                    }
                    set {
                        this.source = value;
                    }
                }
            }
        }
    }
    
    public class CommentFeed : Google.Apis.Requests.IResponse {
        
        private string id;
        
        private IList<Comment> items;
        
        private string kind;
        
        private LinksData links;
        
        private string title;
        
        private string updated;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Comment> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class LinksData {
        }
    }
    
    public class CountFeed : Google.Apis.Requests.IResponse {
        
        private CountsData counts;
        
        private string kind;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("counts")]
        public virtual CountsData Counts {
            get {
                return this.counts;
            }
            set {
                this.counts = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class CountsData {
        }
    }
    
    public class Group : Google.Apis.Requests.IResponse {
        
        private string id;
        
        private string kind;
        
        private LinksData links;
        
        private string memberCount;
        
        private string title;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("memberCount")]
        public virtual string MemberCount {
            get {
                return this.memberCount;
            }
            set {
                this.memberCount = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class LinksData {
            
            private IList<SelfData> self;
            
            [Newtonsoft.Json.JsonPropertyAttribute("self")]
            public virtual IList<SelfData> Self {
                get {
                    return this.self;
                }
                set {
                    this.self = value;
                }
            }
            
            public class SelfData {
                
                private string href;
                
                private string type;
                
                [Newtonsoft.Json.JsonPropertyAttribute("href")]
                public virtual string Href {
                    get {
                        return this.href;
                    }
                    set {
                        this.href = value;
                    }
                }
                
                [Newtonsoft.Json.JsonPropertyAttribute("type")]
                public virtual string Type {
                    get {
                        return this.type;
                    }
                    set {
                        this.type = value;
                    }
                }
            }
        }
    }
    
    public class GroupFeed : Google.Apis.Requests.IResponse {
        
        private IList<Group> items;
        
        private string kind;
        
        private LinksData links;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Group> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class LinksData {
        }
    }
    
    public class Link {
        
        private long count;
        
        private long height;
        
        private string href;
        
        private string title;
        
        private string type;
        
        private string updated;
        
        private long width;
        
        [Newtonsoft.Json.JsonPropertyAttribute("count")]
        public virtual long Count {
            get {
                return this.count;
            }
            set {
                this.count = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        public virtual long Height {
            get {
                return this.height;
            }
            set {
                this.height = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("href")]
        public virtual string Href {
            get {
                return this.href;
            }
            set {
                this.href = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type {
            get {
                return this.type;
            }
            set {
                this.type = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        public virtual long Width {
            get {
                return this.width;
            }
            set {
                this.width = value;
            }
        }
    }
    
    public class PeopleFeed : Google.Apis.Requests.IResponse {
        
        private IList<Person> entry;
        
        private string itemsPerPage;
        
        private string kind;
        
        private string startIndex;
        
        private string totalResults;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("entry")]
        public virtual IList<Person> Entry {
            get {
                return this.entry;
            }
            set {
                this.entry = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("itemsPerPage")]
        public virtual string ItemsPerPage {
            get {
                return this.itemsPerPage;
            }
            set {
                this.itemsPerPage = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("startIndex")]
        public virtual string StartIndex {
            get {
                return this.startIndex;
            }
            set {
                this.startIndex = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("totalResults")]
        public virtual string TotalResults {
            get {
                return this.totalResults;
            }
            set {
                this.totalResults = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
    
    public class Person : Google.Apis.Requests.IResponse {
        
        private string aboutMe;
        
        private IList<AccountsData> accounts;
        
        private IList<System.String> activities;
        
        private IList<AddressesData> addresses;
        
        private string anniversary;
        
        private string birthday;
        
        private string bodyType;
        
        private IList<System.String> books;
        
        private IList<System.String> cars;
        
        private IList<System.String> children;
        
        private string connected;
        
        private string currentLocation;
        
        private string displayName;
        
        private string drinker;
        
        private IList<EmailsData> emails;
        
        private string ethnicity;
        
        private string fashion;
        
        private IList<System.String> food;
        
        private string gender;
        
        private string happiestWhen;
        
        private string hasApp;
        
        private IList<System.String> heroes;
        
        private string humor;
        
        private string id;
        
        private IList<ImsData> ims;
        
        private IList<System.String> interests;
        
        private IList<System.String> jobInterests;
        
        private string kind;
        
        private IList<System.String> languages;
        
        private IList<System.String> languagesSpoken;
        
        private string livingArrangement;
        
        private string lookingFor;
        
        private IList<System.String> movies;
        
        private IList<System.String> music;
        
        private NameData name;
        
        private string nickname;
        
        private string note;
        
        private IList<OrganizationsData> organizations;
        
        private IList<System.String> pets;
        
        private IList<PhoneNumbersData> phoneNumbers;
        
        private IList<PhotosData> photos;
        
        private IList<System.String> politicalViews;
        
        private string preferredUsername;
        
        private string profileSong;
        
        private string profileUrl;
        
        private string profileVideo;
        
        private string published;
        
        private IList<System.String> quotes;
        
        private string relationshipStatus;
        
        private IList<System.String> relationships;
        
        private string religion;
        
        private string romance;
        
        private string scaredOf;
        
        private string sexualOrientation;
        
        private string smoker;
        
        private IList<System.String> sports;
        
        private string status;
        
        private IList<System.String> tags;
        
        private string thumbnailUrl;
        
        private IList<System.String> turnOffs;
        
        private IList<System.String> turnOns;
        
        private IList<System.String> tvShows;
        
        private string updated;
        
        private IList<UrlsData> urls;
        
        private string utcOffset;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("aboutMe")]
        public virtual string AboutMe {
            get {
                return this.aboutMe;
            }
            set {
                this.aboutMe = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("accounts")]
        public virtual IList<AccountsData> Accounts {
            get {
                return this.accounts;
            }
            set {
                this.accounts = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("activities")]
        public virtual IList<System.String> Activities {
            get {
                return this.activities;
            }
            set {
                this.activities = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("addresses")]
        public virtual IList<AddressesData> Addresses {
            get {
                return this.addresses;
            }
            set {
                this.addresses = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("anniversary")]
        public virtual string Anniversary {
            get {
                return this.anniversary;
            }
            set {
                this.anniversary = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("birthday")]
        public virtual string Birthday {
            get {
                return this.birthday;
            }
            set {
                this.birthday = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("bodyType")]
        public virtual string BodyType {
            get {
                return this.bodyType;
            }
            set {
                this.bodyType = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("books")]
        public virtual IList<System.String> Books {
            get {
                return this.books;
            }
            set {
                this.books = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("cars")]
        public virtual IList<System.String> Cars {
            get {
                return this.cars;
            }
            set {
                this.cars = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("children")]
        public virtual IList<System.String> Children {
            get {
                return this.children;
            }
            set {
                this.children = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("connected")]
        public virtual string Connected {
            get {
                return this.connected;
            }
            set {
                this.connected = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("currentLocation")]
        public virtual string CurrentLocation {
            get {
                return this.currentLocation;
            }
            set {
                this.currentLocation = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
        public virtual string DisplayName {
            get {
                return this.displayName;
            }
            set {
                this.displayName = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("drinker")]
        public virtual string Drinker {
            get {
                return this.drinker;
            }
            set {
                this.drinker = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("emails")]
        public virtual IList<EmailsData> Emails {
            get {
                return this.emails;
            }
            set {
                this.emails = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("ethnicity")]
        public virtual string Ethnicity {
            get {
                return this.ethnicity;
            }
            set {
                this.ethnicity = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("fashion")]
        public virtual string Fashion {
            get {
                return this.fashion;
            }
            set {
                this.fashion = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("food")]
        public virtual IList<System.String> Food {
            get {
                return this.food;
            }
            set {
                this.food = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("gender")]
        public virtual string Gender {
            get {
                return this.gender;
            }
            set {
                this.gender = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("happiestWhen")]
        public virtual string HappiestWhen {
            get {
                return this.happiestWhen;
            }
            set {
                this.happiestWhen = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("hasApp")]
        public virtual string HasApp {
            get {
                return this.hasApp;
            }
            set {
                this.hasApp = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("heroes")]
        public virtual IList<System.String> Heroes {
            get {
                return this.heroes;
            }
            set {
                this.heroes = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("humor")]
        public virtual string Humor {
            get {
                return this.humor;
            }
            set {
                this.humor = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("ims")]
        public virtual IList<ImsData> Ims {
            get {
                return this.ims;
            }
            set {
                this.ims = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("interests")]
        public virtual IList<System.String> Interests {
            get {
                return this.interests;
            }
            set {
                this.interests = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("jobInterests")]
        public virtual IList<System.String> JobInterests {
            get {
                return this.jobInterests;
            }
            set {
                this.jobInterests = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("languages")]
        public virtual IList<System.String> Languages {
            get {
                return this.languages;
            }
            set {
                this.languages = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("languagesSpoken")]
        public virtual IList<System.String> LanguagesSpoken {
            get {
                return this.languagesSpoken;
            }
            set {
                this.languagesSpoken = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("livingArrangement")]
        public virtual string LivingArrangement {
            get {
                return this.livingArrangement;
            }
            set {
                this.livingArrangement = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("lookingFor")]
        public virtual string LookingFor {
            get {
                return this.lookingFor;
            }
            set {
                this.lookingFor = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("movies")]
        public virtual IList<System.String> Movies {
            get {
                return this.movies;
            }
            set {
                this.movies = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("music")]
        public virtual IList<System.String> Music {
            get {
                return this.music;
            }
            set {
                this.music = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual NameData Name {
            get {
                return this.name;
            }
            set {
                this.name = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("nickname")]
        public virtual string Nickname {
            get {
                return this.nickname;
            }
            set {
                this.nickname = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("note")]
        public virtual string Note {
            get {
                return this.note;
            }
            set {
                this.note = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("organizations")]
        public virtual IList<OrganizationsData> Organizations {
            get {
                return this.organizations;
            }
            set {
                this.organizations = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("pets")]
        public virtual IList<System.String> Pets {
            get {
                return this.pets;
            }
            set {
                this.pets = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("phoneNumbers")]
        public virtual IList<PhoneNumbersData> PhoneNumbers {
            get {
                return this.phoneNumbers;
            }
            set {
                this.phoneNumbers = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("photos")]
        public virtual IList<PhotosData> Photos {
            get {
                return this.photos;
            }
            set {
                this.photos = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("politicalViews")]
        public virtual IList<System.String> PoliticalViews {
            get {
                return this.politicalViews;
            }
            set {
                this.politicalViews = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("preferredUsername")]
        public virtual string PreferredUsername {
            get {
                return this.preferredUsername;
            }
            set {
                this.preferredUsername = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("profileSong")]
        public virtual string ProfileSong {
            get {
                return this.profileSong;
            }
            set {
                this.profileSong = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("profileUrl")]
        public virtual string ProfileUrl {
            get {
                return this.profileUrl;
            }
            set {
                this.profileUrl = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("profileVideo")]
        public virtual string ProfileVideo {
            get {
                return this.profileVideo;
            }
            set {
                this.profileVideo = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("published")]
        public virtual string Published {
            get {
                return this.published;
            }
            set {
                this.published = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("quotes")]
        public virtual IList<System.String> Quotes {
            get {
                return this.quotes;
            }
            set {
                this.quotes = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("relationshipStatus")]
        public virtual string RelationshipStatus {
            get {
                return this.relationshipStatus;
            }
            set {
                this.relationshipStatus = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("relationships")]
        public virtual IList<System.String> Relationships {
            get {
                return this.relationships;
            }
            set {
                this.relationships = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("religion")]
        public virtual string Religion {
            get {
                return this.religion;
            }
            set {
                this.religion = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("romance")]
        public virtual string Romance {
            get {
                return this.romance;
            }
            set {
                this.romance = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("scaredOf")]
        public virtual string ScaredOf {
            get {
                return this.scaredOf;
            }
            set {
                this.scaredOf = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("sexualOrientation")]
        public virtual string SexualOrientation {
            get {
                return this.sexualOrientation;
            }
            set {
                this.sexualOrientation = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("smoker")]
        public virtual string Smoker {
            get {
                return this.smoker;
            }
            set {
                this.smoker = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("sports")]
        public virtual IList<System.String> Sports {
            get {
                return this.sports;
            }
            set {
                this.sports = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status {
            get {
                return this.status;
            }
            set {
                this.status = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("tags")]
        public virtual IList<System.String> Tags {
            get {
                return this.tags;
            }
            set {
                this.tags = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("thumbnailUrl")]
        public virtual string ThumbnailUrl {
            get {
                return this.thumbnailUrl;
            }
            set {
                this.thumbnailUrl = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("turnOffs")]
        public virtual IList<System.String> TurnOffs {
            get {
                return this.turnOffs;
            }
            set {
                this.turnOffs = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("turnOns")]
        public virtual IList<System.String> TurnOns {
            get {
                return this.turnOns;
            }
            set {
                this.turnOns = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("tvShows")]
        public virtual IList<System.String> TvShows {
            get {
                return this.tvShows;
            }
            set {
                this.tvShows = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("urls")]
        public virtual IList<UrlsData> Urls {
            get {
                return this.urls;
            }
            set {
                this.urls = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("utcOffset")]
        public virtual string UtcOffset {
            get {
                return this.utcOffset;
            }
            set {
                this.utcOffset = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class AccountsData {
            
            private string domain;
            
            private string userid;
            
            private string username;
            
            [Newtonsoft.Json.JsonPropertyAttribute("domain")]
            public virtual string Domain {
                get {
                    return this.domain;
                }
                set {
                    this.domain = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("userid")]
            public virtual string Userid {
                get {
                    return this.userid;
                }
                set {
                    this.userid = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("username")]
            public virtual string Username {
                get {
                    return this.username;
                }
                set {
                    this.username = value;
                }
            }
        }
        
        public class AddressesData {
            
            private string country;
            
            private string formatted;
            
            private string locality;
            
            private string postalCode;
            
            private string primary;
            
            private string region;
            
            private string streetAddress;
            
            private string type;
            
            [Newtonsoft.Json.JsonPropertyAttribute("country")]
            public virtual string Country {
                get {
                    return this.country;
                }
                set {
                    this.country = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("formatted")]
            public virtual string Formatted {
                get {
                    return this.formatted;
                }
                set {
                    this.formatted = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("locality")]
            public virtual string Locality {
                get {
                    return this.locality;
                }
                set {
                    this.locality = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("postalCode")]
            public virtual string PostalCode {
                get {
                    return this.postalCode;
                }
                set {
                    this.postalCode = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("primary")]
            public virtual string Primary {
                get {
                    return this.primary;
                }
                set {
                    this.primary = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("region")]
            public virtual string Region {
                get {
                    return this.region;
                }
                set {
                    this.region = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("streetAddress")]
            public virtual string StreetAddress {
                get {
                    return this.streetAddress;
                }
                set {
                    this.streetAddress = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
        }
        
        public class EmailsData {
            
            private string primary;
            
            private string type;
            
            private string value;
            
            [Newtonsoft.Json.JsonPropertyAttribute("primary")]
            public virtual string Primary {
                get {
                    return this.primary;
                }
                set {
                    this.primary = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("value")]
            public virtual string Value {
                get {
                    return this.value;
                }
                set {
                    this.value = value;
                }
            }
        }
        
        public class ImsData {
            
            private string primary;
            
            private string type;
            
            private string value;
            
            [Newtonsoft.Json.JsonPropertyAttribute("primary")]
            public virtual string Primary {
                get {
                    return this.primary;
                }
                set {
                    this.primary = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("value")]
            public virtual string Value {
                get {
                    return this.value;
                }
                set {
                    this.value = value;
                }
            }
        }
        
        public class NameData {
            
            private string familyName;
            
            private string formatted;
            
            private string givenName;
            
            private string honorificPrefix;
            
            private string honorificSuffix;
            
            private string middleName;
            
            [Newtonsoft.Json.JsonPropertyAttribute("familyName")]
            public virtual string FamilyName {
                get {
                    return this.familyName;
                }
                set {
                    this.familyName = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("formatted")]
            public virtual string Formatted {
                get {
                    return this.formatted;
                }
                set {
                    this.formatted = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("givenName")]
            public virtual string GivenName {
                get {
                    return this.givenName;
                }
                set {
                    this.givenName = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("honorificPrefix")]
            public virtual string HonorificPrefix {
                get {
                    return this.honorificPrefix;
                }
                set {
                    this.honorificPrefix = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("honorificSuffix")]
            public virtual string HonorificSuffix {
                get {
                    return this.honorificSuffix;
                }
                set {
                    this.honorificSuffix = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("middleName")]
            public virtual string MiddleName {
                get {
                    return this.middleName;
                }
                set {
                    this.middleName = value;
                }
            }
        }
        
        public class OrganizationsData {
            
            private string department;
            
            private string description;
            
            private string endDate;
            
            private string location;
            
            private string name;
            
            private string primary;
            
            private string startDate;
            
            private string title;
            
            private string type;
            
            [Newtonsoft.Json.JsonPropertyAttribute("department")]
            public virtual string Department {
                get {
                    return this.department;
                }
                set {
                    this.department = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("description")]
            public virtual string Description {
                get {
                    return this.description;
                }
                set {
                    this.description = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("endDate")]
            public virtual string EndDate {
                get {
                    return this.endDate;
                }
                set {
                    this.endDate = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("location")]
            public virtual string Location {
                get {
                    return this.location;
                }
                set {
                    this.location = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("name")]
            public virtual string Name {
                get {
                    return this.name;
                }
                set {
                    this.name = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("primary")]
            public virtual string Primary {
                get {
                    return this.primary;
                }
                set {
                    this.primary = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("startDate")]
            public virtual string StartDate {
                get {
                    return this.startDate;
                }
                set {
                    this.startDate = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("title")]
            public virtual string Title {
                get {
                    return this.title;
                }
                set {
                    this.title = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
        }
        
        public class PhoneNumbersData {
            
            private string primary;
            
            private string type;
            
            private string value;
            
            [Newtonsoft.Json.JsonPropertyAttribute("primary")]
            public virtual string Primary {
                get {
                    return this.primary;
                }
                set {
                    this.primary = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("value")]
            public virtual string Value {
                get {
                    return this.value;
                }
                set {
                    this.value = value;
                }
            }
        }
        
        public class PhotosData {
            
            private string height;
            
            private string primary;
            
            private string type;
            
            private string value;
            
            private string width;
            
            [Newtonsoft.Json.JsonPropertyAttribute("height")]
            public virtual string Height {
                get {
                    return this.height;
                }
                set {
                    this.height = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("primary")]
            public virtual string Primary {
                get {
                    return this.primary;
                }
                set {
                    this.primary = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("value")]
            public virtual string Value {
                get {
                    return this.value;
                }
                set {
                    this.value = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("width")]
            public virtual string Width {
                get {
                    return this.width;
                }
                set {
                    this.width = value;
                }
            }
        }
        
        public class UrlsData {
            
            private string primary;
            
            private string type;
            
            private string value;
            
            [Newtonsoft.Json.JsonPropertyAttribute("primary")]
            public virtual string Primary {
                get {
                    return this.primary;
                }
                set {
                    this.primary = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("type")]
            public virtual string Type {
                get {
                    return this.type;
                }
                set {
                    this.type = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("value")]
            public virtual string Value {
                get {
                    return this.value;
                }
                set {
                    this.value = value;
                }
            }
        }
    }
    
    public class PhotosFeed : Google.Apis.Requests.IResponse {
        
        private IList<ChiliPhotosResourceJson> items;
        
        private string kind;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<ChiliPhotosResourceJson> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
    
    public class Related {
        
        private string href;
        
        private string id;
        
        private string kind;
        
        private string summary;
        
        private string title;
        
        [Newtonsoft.Json.JsonPropertyAttribute("href")]
        public virtual string Href {
            get {
                return this.href;
            }
            set {
                this.href = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("summary")]
        public virtual string Summary {
            get {
                return this.summary;
            }
            set {
                this.summary = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
    }
    
    public class RelatedFeed : Google.Apis.Requests.IResponse {
        
        private string id;
        
        private IList<Related> items;
        
        private string kind;
        
        private LinksData links;
        
        private string title;
        
        private string updated;
        
        private Google.Apis.Requests.RequestError error;
        
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Related> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("links")]
        public virtual LinksData Links {
            get {
                return this.links;
            }
            set {
                this.links = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public class LinksData {
        }
    }
    
    public class Video {
        
        private string duration;
        
        private string size;
        
        private string status;
        
        private IList<Link> streams;
        
        [Newtonsoft.Json.JsonPropertyAttribute("duration")]
        public virtual string Duration {
            get {
                return this.duration;
            }
            set {
                this.duration = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("size")]
        public virtual string Size {
            get {
                return this.size;
            }
            set {
                this.size = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("status")]
        public virtual string Status {
            get {
                return this.status;
            }
            set {
                this.status = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("streams")]
        public virtual IList<Link> Streams {
            get {
                return this.streams;
            }
            set {
                this.streams = value;
            }
        }
    }
}
namespace Google.Apis.Buzz.V1 {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public class BuzzService : Google.Apis.Discovery.IRequestExecutor, Google.Apis.Discovery.ISchemaAwareRequestExecutor {
        
        private Google.Apis.Discovery.IService genericService;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Version = "v1";
        
        private const string Name = "buzz";
        
        private const string BaseUri = "https://www.googleapis.com//buzz/v1/";
        
        private const Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_1_0;
        
        private string developerKey;
        
        private ActivitiesResource activities;
        
        private CommentsResource comments;
        
        private GroupsResource groups;
        
        private PeopleResource people;
        
        private PhotoAlbumsResource photoAlbums;
        
        private PhotosResource photos;
        
        private RelatedResource related;
        
        public BuzzService(Google.Apis.Discovery.IService genericService, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.genericService = genericService;
            this.authenticator = authenticator;
            this.activities = new ActivitiesResource(this);
            this.comments = new CommentsResource(this);
            this.groups = new GroupsResource(this);
            this.people = new PeopleResource(this);
            this.photoAlbums = new PhotoAlbumsResource(this);
            this.photos = new PhotosResource(this);
            this.related = new RelatedResource(this);
        }
        
        public BuzzService() : 
                this(new Google.Apis.Discovery.DiscoveryService(new Google.Apis.Discovery.WebDiscoveryDevice(new System.Uri(string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", BuzzService.Name, BuzzService.Version)))).GetService(BuzzService.Version, BuzzService.DiscoveryVersionUsed, new Google.Apis.Discovery.FactoryParameterV1_0(new System.Uri(BuzzService.BaseUri))), Google.Apis.Authentication.AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {
        }
        
        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey {
            get {
                return this.developerKey;
            }
            set {
                this.developerKey = value;
            }
        }
        
        public virtual ActivitiesResource Activities {
            get {
                return this.activities;
            }
        }
        
        public virtual CommentsResource Comments {
            get {
                return this.comments;
            }
        }
        
        public virtual GroupsResource Groups {
            get {
                return this.groups;
            }
        }
        
        public virtual PeopleResource People {
            get {
                return this.people;
            }
        }
        
        public virtual PhotoAlbumsResource PhotoAlbums {
            get {
                return this.photoAlbums;
            }
        }
        
        public virtual PhotosResource Photos {
            get {
                return this.photos;
            }
        }
        
        public virtual RelatedResource Related {
            get {
                return this.related;
            }
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, string body, System.Collections.Generic.IDictionary<string, object> parameters) {
            Google.Apis.Requests.IRequest request = this.genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false) {
                request = request.WithDeveloperKey(this.DeveloperKey);
            }
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, object body, System.Collections.Generic.IDictionary<string, object> parameters) {
            return this.ExecuteRequest(resource, method, this.ObjectToJson(body), parameters);
        }
        
        public virtual void RegisterSerializer(Google.Apis.ISerializer serializer) {
            genericService.Serializer = serializer;
        }
        
        public virtual string ObjectToJson(object obj) {
            return genericService.SerializeRequest(obj);
        }
        
        public virtual T JsonToObject<T>(System.IO.Stream stream)
         {
            return genericService.DeserializeResponse<T>(stream);
        }
    }
    
    public class ActivitiesResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "activities";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(ActivitiesResource));
        
        public ActivitiesResource(BuzzService service) {
            this.service = service;
        }
        
        /// <summary>Get a count of link shares</summary>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="url">Optional - URLs for which to get share counts.</param>
        public virtual System.IO.Stream CountAsStream(string hl, Google.Apis.Util.Repeatable<string> url) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["hl"] = hl;
            parameters["url"] = url;
            logger.Debug("Executing activities.count");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "count", body, parameters);
            logger.Debug("Done Executing activities.count");
            return ret;
        }
        
        /// <summary>Delete an activity</summary>
        /// <param name="postId">Required - ID of the activity to delete.</param>
        /// <param name="scope">Required - Must be one of the following values [@liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to delete.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream DeleteAsStream(string postId, string scope, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }
        
        /// <summary>Search for people by topic</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual System.IO.Stream ExtractPeopleFromSearchAsStream(string alt, string bbox, string c, string hl, string lat, string lon, long maxResults, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "extractPeopleFromSearch", body, parameters);
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }
        
        /// <summary>Get an activity</summary>
        /// <param name="postId">Required - ID of the post to get.</param>
        /// <param name="userId">Required - ID of the user whose post to get.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual System.IO.Stream GetAsStream(string postId, string userId, string alt, string hl, long maxComments, long maxLiked, bool truncateAtom) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.get");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing activities.get");
            return ret;
        }
        
        /// <summary>Create a new activity</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="preview">Optional - If true, only preview the action.</param>
        public virtual System.IO.Stream InsertAsStream(string body, string userId, string alt, string hl, bool preview) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["preview"] = preview;
            logger.Debug("Executing activities.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing activities.insert");
            return ret;
        }
        
        /// <summary>List activities</summary>
        /// <param name="scope">Required - Must be one of the following values [@comments, @consumption, @liked, @public, @self] - The collection of activities to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual System.IO.Stream ListAsStream(string scope, string userId, string alt, string c, string hl, long maxComments, long maxLiked, long maxResults, bool truncateAtom) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["max-results"] = maxResults;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.list");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing activities.list");
            return ret;
        }
        
        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream PatchAsStream(string body, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing activities.patch");
            return ret;
        }
        
        /// <summary>Search for activities</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual System.IO.Stream SearchAsStream(string alt, string bbox, string c, string hl, string lat, string lon, long maxResults, string pid, string q, string radius, bool truncateAtom) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.search");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "search", body, parameters);
            logger.Debug("Done Executing activities.search");
            return ret;
        }
        
        /// <summary>Get real-time activity tracking information</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual System.IO.Stream TrackAsStream(string alt, string bbox, string c, string hl, string lat, string lon, long maxResults, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.track");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "track", body, parameters);
            logger.Debug("Done Executing activities.track");
            return ret;
        }
        
        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream UpdateAsStream(string body, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.update");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing activities.update");
            return ret;
        }
        
        /// <summary>Get a count of link shares</summary>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="url">Optional - URLs for which to get share counts.</param>
        public virtual Google.Apis.Buzz.V1.Data.CountFeed Count(string hl, Google.Apis.Util.Repeatable<string> url) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["hl"] = hl;
            parameters["url"] = url;
            logger.Debug("Executing activities.count");
            Google.Apis.Buzz.V1.Data.CountFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.CountFeed>(this.service.ExecuteRequest(ActivitiesResource.Resource, "count", body, parameters));
            logger.Debug("Done Executing activities.count");
            return ret;
        }
        
        /// <summary>Delete an activity</summary>
        /// <param name="postId">Required - ID of the activity to delete.</param>
        /// <param name="scope">Required - Must be one of the following values [@liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to delete.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream Delete(string postId, string scope, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }
        
        /// <summary>Search for people by topic</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual Google.Apis.Buzz.V1.Data.PeopleFeed ExtractPeopleFromSearch(string alt, string bbox, string c, string hl, string lat, string lon, long maxResults, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            Google.Apis.Buzz.V1.Data.PeopleFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.PeopleFeed>(this.service.ExecuteRequest(ActivitiesResource.Resource, "extractPeopleFromSearch", body, parameters));
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }
        
        /// <summary>Get an activity</summary>
        /// <param name="postId">Required - ID of the post to get.</param>
        /// <param name="userId">Required - ID of the user whose post to get.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual Google.Apis.Buzz.V1.Data.Activity Get(string postId, string userId, string alt, string hl, long maxComments, long maxLiked, bool truncateAtom) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.get");
            Google.Apis.Buzz.V1.Data.Activity ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Activity>(this.service.ExecuteRequest(ActivitiesResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing activities.get");
            return ret;
        }
        
        /// <summary>Create a new activity</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="preview">Optional - If true, only preview the action.</param>
        public virtual Google.Apis.Buzz.V1.Data.Activity Insert(Google.Apis.Buzz.V1.Data.Activity body, string userId, string alt, string hl, bool preview) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["preview"] = preview;
            logger.Debug("Executing activities.insert");
            Google.Apis.Buzz.V1.Data.Activity ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Activity>(this.service.ExecuteRequest(ActivitiesResource.Resource, "insert", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing activities.insert");
            return ret;
        }
        
        /// <summary>List activities</summary>
        /// <param name="scope">Required - Must be one of the following values [@comments, @consumption, @liked, @public, @self] - The collection of activities to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual Google.Apis.Buzz.V1.Data.ActivityFeed List(string scope, string userId, string alt, string c, string hl, long maxComments, long maxLiked, long maxResults, bool truncateAtom) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["max-results"] = maxResults;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.list");
            Google.Apis.Buzz.V1.Data.ActivityFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.ActivityFeed>(this.service.ExecuteRequest(ActivitiesResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing activities.list");
            return ret;
        }
        
        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Activity Patch(Google.Apis.Buzz.V1.Data.Activity body, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.patch");
            Google.Apis.Buzz.V1.Data.Activity ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Activity>(this.service.ExecuteRequest(ActivitiesResource.Resource, "patch", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing activities.patch");
            return ret;
        }
        
        /// <summary>Search for activities</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual Google.Apis.Buzz.V1.Data.ActivityFeed Search(string alt, string bbox, string c, string hl, string lat, string lon, long maxResults, string pid, string q, string radius, bool truncateAtom) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.search");
            Google.Apis.Buzz.V1.Data.ActivityFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.ActivityFeed>(this.service.ExecuteRequest(ActivitiesResource.Resource, "search", body, parameters));
            logger.Debug("Done Executing activities.search");
            return ret;
        }
        
        /// <summary>Get real-time activity tracking information</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual Google.Apis.Buzz.V1.Data.ActivityFeed Track(string alt, string bbox, string c, string hl, string lat, string lon, long maxResults, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.track");
            Google.Apis.Buzz.V1.Data.ActivityFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.ActivityFeed>(this.service.ExecuteRequest(ActivitiesResource.Resource, "track", body, parameters));
            logger.Debug("Done Executing activities.track");
            return ret;
        }
        
        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Activity Update(Google.Apis.Buzz.V1.Data.Activity body, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.update");
            Google.Apis.Buzz.V1.Data.Activity ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Activity>(this.service.ExecuteRequest(ActivitiesResource.Resource, "update", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing activities.update");
            return ret;
        }
        
        /// <summary>Get a count of link shares</summary>
        public virtual System.IO.Stream Count(System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            logger.Debug("Executing activities.count");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "count", body, parameters);
            logger.Debug("Done Executing activities.count");
            return ret;
        }
        
        /// <summary>Delete an activity</summary>
        /// <param name="postIdValue">postId - Required - ID of the activity to delete.</param>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userIdValue">userId - Required - ID of the user whose post to delete.</param>
        public virtual System.IO.Stream Delete(string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }
        
        /// <summary>Search for people by topic</summary>
        public virtual System.IO.Stream ExtractPeopleFromSearch(System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "extractPeopleFromSearch", body, parameters);
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }
        
        /// <summary>Get an activity</summary>
        /// <param name="postIdValue">postId - Required - ID of the post to get.</param>
        /// <param name="userIdValue">userId - Required - ID of the user whose post to get.</param>
        public virtual System.IO.Stream Get(string postId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.get");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing activities.get");
            return ret;
        }
        
        /// <summary>Create a new activity</summary>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Insert(string body, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["userId"] = userId;
            logger.Debug("Executing activities.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing activities.insert");
            return ret;
        }
        
        /// <summary>List activities</summary>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@comments, @consumption, @liked, @public, @self] - The collection of activities to list.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream List(string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.list");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing activities.list");
            return ret;
        }
        
        /// <summary>Update an activity</summary>
        /// <param name="postIdValue">postId - Required - ID of the activity to update.</param>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userIdValue">userId - Required - ID of the user whose post to update.</param>
        public virtual System.IO.Stream Patch(string body, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing activities.patch");
            return ret;
        }
        
        /// <summary>Search for activities</summary>
        public virtual System.IO.Stream Search(System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            logger.Debug("Executing activities.search");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "search", body, parameters);
            logger.Debug("Done Executing activities.search");
            return ret;
        }
        
        /// <summary>Get real-time activity tracking information</summary>
        public virtual System.IO.Stream Track(System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            logger.Debug("Executing activities.track");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "track", body, parameters);
            logger.Debug("Done Executing activities.track");
            return ret;
        }
        
        /// <summary>Update an activity</summary>
        /// <param name="postIdValue">postId - Required - ID of the activity to update.</param>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userIdValue">userId - Required - ID of the user whose post to update.</param>
        public virtual System.IO.Stream Update(string body, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.update");
            System.IO.Stream ret = this.service.ExecuteRequest(ActivitiesResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing activities.update");
            return ret;
        }
    }
    
    public class CommentsResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "comments";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(CommentsResource));
        
        public CommentsResource(BuzzService service) {
            this.service = service;
        }
        
        /// <summary>Delete a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to delete the comment.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream DeleteAsStream(string commentId, string postId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing comments.delete");
            return ret;
        }
        
        /// <summary>Get a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream GetAsStream(string commentId, string postId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.get");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing comments.get");
            return ret;
        }
        
        /// <summary>Create a comment</summary>
        /// <param name="postId">Required - ID of the activity on which to comment.</param>
        /// <param name="userId">Required - ID of the user on whose behalf to comment.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream InsertAsStream(string body, string postId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing comments.insert");
            return ret;
        }
        
        /// <summary>List comments</summary>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user for whose post to get comments.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream ListAsStream(string postId, string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing comments.list");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing comments.list");
            return ret;
        }
        
        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream PatchAsStream(string body, string commentId, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing comments.patch");
            return ret;
        }
        
        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream UpdateAsStream(string body, string commentId, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.update");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing comments.update");
            return ret;
        }
        
        /// <summary>Delete a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to delete the comment.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream Delete(string commentId, string postId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing comments.delete");
            return ret;
        }
        
        /// <summary>Get a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Comment Get(string commentId, string postId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.get");
            Google.Apis.Buzz.V1.Data.Comment ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Comment>(this.service.ExecuteRequest(CommentsResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing comments.get");
            return ret;
        }
        
        /// <summary>Create a comment</summary>
        /// <param name="postId">Required - ID of the activity on which to comment.</param>
        /// <param name="userId">Required - ID of the user on whose behalf to comment.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Comment Insert(Google.Apis.Buzz.V1.Data.Comment body, string postId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.insert");
            Google.Apis.Buzz.V1.Data.Comment ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Comment>(this.service.ExecuteRequest(CommentsResource.Resource, "insert", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing comments.insert");
            return ret;
        }
        
        /// <summary>List comments</summary>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user for whose post to get comments.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.CommentFeed List(string postId, string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing comments.list");
            Google.Apis.Buzz.V1.Data.CommentFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.CommentFeed>(this.service.ExecuteRequest(CommentsResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing comments.list");
            return ret;
        }
        
        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Comment Patch(Google.Apis.Buzz.V1.Data.Comment body, string commentId, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.patch");
            Google.Apis.Buzz.V1.Data.Comment ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Comment>(this.service.ExecuteRequest(CommentsResource.Resource, "patch", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing comments.patch");
            return ret;
        }
        
        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Comment Update(Google.Apis.Buzz.V1.Data.Comment body, string commentId, string postId, string scope, string userId, string abuseType, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.update");
            Google.Apis.Buzz.V1.Data.Comment ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Comment>(this.service.ExecuteRequest(CommentsResource.Resource, "update", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing comments.update");
            return ret;
        }
        
        /// <summary>Delete a comment</summary>
        /// <param name="commentIdValue">commentId - Required - ID of the comment being referenced.</param>
        /// <param name="postIdValue">postId - Required - ID of the activity for which to delete the comment.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Delete(string commentId, string postId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing comments.delete");
            return ret;
        }
        
        /// <summary>Get a comment</summary>
        /// <param name="commentIdValue">commentId - Required - ID of the comment being referenced.</param>
        /// <param name="postIdValue">postId - Required - ID of the activity for which to get comments.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Get(string commentId, string postId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.get");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing comments.get");
            return ret;
        }
        
        /// <summary>Create a comment</summary>
        /// <param name="postIdValue">postId - Required - ID of the activity on which to comment.</param>
        /// <param name="userIdValue">userId - Required - ID of the user on whose behalf to comment.</param>
        public virtual System.IO.Stream Insert(string body, string postId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing comments.insert");
            return ret;
        }
        
        /// <summary>List comments</summary>
        /// <param name="postIdValue">postId - Required - ID of the activity for which to get comments.</param>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userIdValue">userId - Required - ID of the user for whose post to get comments.</param>
        public virtual System.IO.Stream List(string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.list");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing comments.list");
            return ret;
        }
        
        /// <summary>Update a comment</summary>
        /// <param name="commentIdValue">commentId - Required - ID of the comment being referenced.</param>
        /// <param name="postIdValue">postId - Required - ID of the activity for which to update the comment.</param>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Patch(string body, string commentId, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing comments.patch");
            return ret;
        }
        
        /// <summary>Update a comment</summary>
        /// <param name="commentIdValue">commentId - Required - ID of the comment being referenced.</param>
        /// <param name="postIdValue">postId - Required - ID of the activity for which to update the comment.</param>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Update(string body, string commentId, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.update");
            System.IO.Stream ret = this.service.ExecuteRequest(CommentsResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing comments.update");
            return ret;
        }
    }
    
    public class GroupsResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "groups";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(GroupsResource));
        
        public GroupsResource(BuzzService service) {
            this.service = service;
        }
        
        /// <summary>Delete a group</summary>
        /// <param name="groupId">Required - ID of the group to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream DeleteAsStream(string groupId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing groups.delete");
            return ret;
        }
        
        /// <summary>Get a group</summary>
        /// <param name="groupId">Required - ID of the group to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream GetAsStream(string groupId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.get");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing groups.get");
            return ret;
        }
        
        /// <summary>Create a group</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream InsertAsStream(string body, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing groups.insert");
            return ret;
        }
        
        /// <summary>Get a user&apos;s groups</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream ListAsStream(string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing groups.list");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing groups.list");
            return ret;
        }
        
        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream PatchAsStream(string body, string groupId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing groups.patch");
            return ret;
        }
        
        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream UpdateAsStream(string body, string groupId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.update");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing groups.update");
            return ret;
        }
        
        /// <summary>Delete a group</summary>
        /// <param name="groupId">Required - ID of the group to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream Delete(string groupId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing groups.delete");
            return ret;
        }
        
        /// <summary>Get a group</summary>
        /// <param name="groupId">Required - ID of the group to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Group Get(string groupId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.get");
            Google.Apis.Buzz.V1.Data.Group ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Group>(this.service.ExecuteRequest(GroupsResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing groups.get");
            return ret;
        }
        
        /// <summary>Create a group</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Group Insert(Google.Apis.Buzz.V1.Data.Group body, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.insert");
            Google.Apis.Buzz.V1.Data.Group ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Group>(this.service.ExecuteRequest(GroupsResource.Resource, "insert", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing groups.insert");
            return ret;
        }
        
        /// <summary>Get a user&apos;s groups</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.GroupFeed List(string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing groups.list");
            Google.Apis.Buzz.V1.Data.GroupFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.GroupFeed>(this.service.ExecuteRequest(GroupsResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing groups.list");
            return ret;
        }
        
        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Group Patch(Google.Apis.Buzz.V1.Data.Group body, string groupId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.patch");
            Google.Apis.Buzz.V1.Data.Group ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Group>(this.service.ExecuteRequest(GroupsResource.Resource, "patch", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing groups.patch");
            return ret;
        }
        
        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Group Update(Google.Apis.Buzz.V1.Data.Group body, string groupId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.update");
            Google.Apis.Buzz.V1.Data.Group ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Group>(this.service.ExecuteRequest(GroupsResource.Resource, "update", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing groups.update");
            return ret;
        }
        
        /// <summary>Delete a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group to delete.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Delete(string groupId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing groups.delete");
            return ret;
        }
        
        /// <summary>Get a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group to get.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Get(string groupId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.get");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing groups.get");
            return ret;
        }
        
        /// <summary>Create a group</summary>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Insert(string body, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["userId"] = userId;
            logger.Debug("Executing groups.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing groups.insert");
            return ret;
        }
        
        /// <summary>Get a user&apos;s groups</summary>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream List(string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.list");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing groups.list");
            return ret;
        }
        
        /// <summary>Update a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group to update.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Patch(string body, string groupId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing groups.patch");
            return ret;
        }
        
        /// <summary>Update a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group to update.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Update(string body, string groupId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.update");
            System.IO.Stream ret = this.service.ExecuteRequest(GroupsResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing groups.update");
            return ret;
        }
    }
    
    public class PeopleResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "people";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(PeopleResource));
        
        public PeopleResource(BuzzService service) {
            this.service = service;
        }
        
        /// <summary>Remove a person from a group</summary>
        /// <param name="groupId">Required - ID of the group from which to remove the person.</param>
        /// <param name="personId">Required - ID of the person to remove from the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream DeleteAsStream(string groupId, string personId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing people.delete");
            return ret;
        }
        
        /// <summary>Get a user profile</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream GetAsStream(string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.get");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing people.get");
            return ret;
        }
        
        /// <summary>Get people who liked an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@liked]</param>
        /// <param name="postId">Required - ID of the activity that was liked.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream LikedAsStream(string groupId, string postId, string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.liked");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "liked", body, parameters);
            logger.Debug("Done Executing people.liked");
            return ret;
        }
        
        /// <summary>Get people in a group</summary>
        /// <param name="groupId">Required - ID of the group for which to list users.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream ListAsStream(string groupId, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.list");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing people.list");
            return ret;
        }
        
        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream PatchAsStream(string body, string groupId, string personId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing people.patch");
            return ret;
        }
        
        /// <summary>Get people who reshared an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@reshared]</param>
        /// <param name="postId">Required - ID of the activity that was reshared.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream ResharedAsStream(string groupId, string postId, string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.reshared");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "reshared", body, parameters);
            logger.Debug("Done Executing people.reshared");
            return ret;
        }
        
        /// <summary>Search for people</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        public virtual System.IO.Stream SearchAsStream(string alt, string c, string hl, long maxResults, string q) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            parameters["q"] = q;
            logger.Debug("Executing people.search");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "search", body, parameters);
            logger.Debug("Done Executing people.search");
            return ret;
        }
        
        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream UpdateAsStream(string body, string groupId, string personId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.update");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing people.update");
            return ret;
        }
        
        /// <summary>Remove a person from a group</summary>
        /// <param name="groupId">Required - ID of the group from which to remove the person.</param>
        /// <param name="personId">Required - ID of the person to remove from the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream Delete(string groupId, string personId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing people.delete");
            return ret;
        }
        
        /// <summary>Get a user profile</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Person Get(string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.get");
            Google.Apis.Buzz.V1.Data.Person ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Person>(this.service.ExecuteRequest(PeopleResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing people.get");
            return ret;
        }
        
        /// <summary>Get people who liked an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@liked]</param>
        /// <param name="postId">Required - ID of the activity that was liked.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.PeopleFeed Liked(string groupId, string postId, string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.liked");
            Google.Apis.Buzz.V1.Data.PeopleFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.PeopleFeed>(this.service.ExecuteRequest(PeopleResource.Resource, "liked", body, parameters));
            logger.Debug("Done Executing people.liked");
            return ret;
        }
        
        /// <summary>Get people in a group</summary>
        /// <param name="groupId">Required - ID of the group for which to list users.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.PeopleFeed List(string groupId, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.list");
            Google.Apis.Buzz.V1.Data.PeopleFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.PeopleFeed>(this.service.ExecuteRequest(PeopleResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing people.list");
            return ret;
        }
        
        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Person Patch(Google.Apis.Buzz.V1.Data.Person body, string groupId, string personId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.patch");
            Google.Apis.Buzz.V1.Data.Person ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Person>(this.service.ExecuteRequest(PeopleResource.Resource, "patch", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing people.patch");
            return ret;
        }
        
        /// <summary>Get people who reshared an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@reshared]</param>
        /// <param name="postId">Required - ID of the activity that was reshared.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.PeopleFeed Reshared(string groupId, string postId, string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.reshared");
            Google.Apis.Buzz.V1.Data.PeopleFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.PeopleFeed>(this.service.ExecuteRequest(PeopleResource.Resource, "reshared", body, parameters));
            logger.Debug("Done Executing people.reshared");
            return ret;
        }
        
        /// <summary>Search for people</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        public virtual Google.Apis.Buzz.V1.Data.PeopleFeed Search(string alt, string c, string hl, long maxResults, string q) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            parameters["q"] = q;
            logger.Debug("Executing people.search");
            Google.Apis.Buzz.V1.Data.PeopleFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.PeopleFeed>(this.service.ExecuteRequest(PeopleResource.Resource, "search", body, parameters));
            logger.Debug("Done Executing people.search");
            return ret;
        }
        
        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Person Update(Google.Apis.Buzz.V1.Data.Person body, string groupId, string personId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.update");
            Google.Apis.Buzz.V1.Data.Person ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Person>(this.service.ExecuteRequest(PeopleResource.Resource, "update", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing people.update");
            return ret;
        }
        
        /// <summary>Remove a person from a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group from which to remove the person.</param>
        /// <param name="personIdValue">personId - Required - ID of the person to remove from the group.</param>
        /// <param name="userIdValue">userId - Required - ID of the owner of the group.</param>
        public virtual System.IO.Stream Delete(string groupId, string personId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing people.delete");
            return ret;
        }
        
        /// <summary>Get a user profile</summary>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Get(string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["userId"] = userId;
            logger.Debug("Executing people.get");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing people.get");
            return ret;
        }
        
        /// <summary>Get people who liked an activity</summary>
        /// <param name="groupIdValue">groupId - Required - Must be one of the following values [@liked]</param>
        /// <param name="postIdValue">postId - Required - ID of the activity that was liked.</param>
        /// <param name="scopeValue">scope - Required</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Liked(string groupId, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing people.liked");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "liked", body, parameters);
            logger.Debug("Done Executing people.liked");
            return ret;
        }
        
        /// <summary>Get people in a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group for which to list users.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream List(string groupId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.list");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing people.list");
            return ret;
        }
        
        /// <summary>Add a person to a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group to which to add the person.</param>
        /// <param name="personIdValue">personId - Required - ID of the person to add to the group.</param>
        /// <param name="userIdValue">userId - Required - ID of the owner of the group.</param>
        public virtual System.IO.Stream Patch(string body, string groupId, string personId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.patch");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "patch", body, parameters);
            logger.Debug("Done Executing people.patch");
            return ret;
        }
        
        /// <summary>Get people who reshared an activity</summary>
        /// <param name="groupIdValue">groupId - Required - Must be one of the following values [@reshared]</param>
        /// <param name="postIdValue">postId - Required - ID of the activity that was reshared.</param>
        /// <param name="scopeValue">scope - Required</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Reshared(string groupId, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing people.reshared");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "reshared", body, parameters);
            logger.Debug("Done Executing people.reshared");
            return ret;
        }
        
        /// <summary>Search for people</summary>
        public virtual System.IO.Stream Search(System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            logger.Debug("Executing people.search");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "search", body, parameters);
            logger.Debug("Done Executing people.search");
            return ret;
        }
        
        /// <summary>Add a person to a group</summary>
        /// <param name="groupIdValue">groupId - Required - ID of the group to which to add the person.</param>
        /// <param name="personIdValue">personId - Required - ID of the person to add to the group.</param>
        /// <param name="userIdValue">userId - Required - ID of the owner of the group.</param>
        public virtual System.IO.Stream Update(string body, string groupId, string personId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.update");
            System.IO.Stream ret = this.service.ExecuteRequest(PeopleResource.Resource, "update", body, parameters);
            logger.Debug("Done Executing people.update");
            return ret;
        }
    }
    
    public class PhotoAlbumsResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "photoAlbums";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(PhotoAlbumsResource));
        
        public PhotoAlbumsResource(BuzzService service) {
            this.service = service;
        }
        
        /// <summary>Delete a photo album</summary>
        /// <param name="albumId">Required - ID of the album to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream DeleteAsStream(string albumId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing photoAlbums.delete");
            return ret;
        }
        
        /// <summary>Get a photo album</summary>
        /// <param name="albumId">Required - ID of the album to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream GetAsStream(string albumId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.get");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing photoAlbums.get");
            return ret;
        }
        
        /// <summary>Create a photo album</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream InsertAsStream(string body, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing photoAlbums.insert");
            return ret;
        }
        
        /// <summary>List a user&apos;s photo albums</summary>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection of albums to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream ListAsStream(string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photoAlbums.list");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing photoAlbums.list");
            return ret;
        }
        
        /// <summary>Delete a photo album</summary>
        /// <param name="albumId">Required - ID of the album to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream Delete(string albumId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing photoAlbums.delete");
            return ret;
        }
        
        /// <summary>Get a photo album</summary>
        /// <param name="albumId">Required - ID of the album to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Album Get(string albumId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.get");
            Google.Apis.Buzz.V1.Data.Album ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Album>(this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing photoAlbums.get");
            return ret;
        }
        
        /// <summary>Create a photo album</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.Album Insert(Google.Apis.Buzz.V1.Data.Album body, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.insert");
            Google.Apis.Buzz.V1.Data.Album ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.Album>(this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "insert", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing photoAlbums.insert");
            return ret;
        }
        
        /// <summary>List a user&apos;s photo albums</summary>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection of albums to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.AlbumsFeed List(string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photoAlbums.list");
            Google.Apis.Buzz.V1.Data.AlbumsFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.AlbumsFeed>(this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing photoAlbums.list");
            return ret;
        }
        
        /// <summary>Delete a photo album</summary>
        /// <param name="albumIdValue">albumId - Required - ID of the album to delete.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Delete(string albumId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            logger.Debug("Executing photoAlbums.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing photoAlbums.delete");
            return ret;
        }
        
        /// <summary>Get a photo album</summary>
        /// <param name="albumIdValue">albumId - Required - ID of the album to get.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Get(string albumId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            logger.Debug("Executing photoAlbums.get");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing photoAlbums.get");
            return ret;
        }
        
        /// <summary>Create a photo album</summary>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Insert(string body, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["userId"] = userId;
            logger.Debug("Executing photoAlbums.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing photoAlbums.insert");
            return ret;
        }
        
        /// <summary>List a user&apos;s photo albums</summary>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@self] - The collection of albums to list.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream List(string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing photoAlbums.list");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotoAlbumsResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing photoAlbums.list");
            return ret;
        }
    }
    
    public class PhotosResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "photos";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(PhotosResource));
        
        public PhotosResource(BuzzService service) {
            this.service = service;
        }
        
        /// <summary>Delete a photo</summary>
        /// <param name="albumId">Required - ID of the album to which to photo belongs.</param>
        /// <param name="photoId">Required - ID of the photo to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream DeleteAsStream(string albumId, string photoId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing photos.delete");
            return ret;
        }
        
        /// <summary>Get photo metadata</summary>
        /// <param name="albumId">Required - ID of the album containing the photo.</param>
        /// <param name="photoId">Required - ID of the photo for which to get metadata.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream GetAsStream(string albumId, string photoId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.get");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing photos.get");
            return ret;
        }
        
        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream InsertAsStream(string body, string albumId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing photos.insert");
            return ret;
        }
        
        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream Insert2AsStream(string body, string albumId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert2");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "insert2", body, parameters);
            logger.Debug("Done Executing photos.insert2");
            return ret;
        }
        
        /// <summary>List photos in an album</summary>
        /// <param name="albumId">Required - ID of the album for which to list photos.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream ListByAlbumAsStream(string albumId, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByAlbum");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "listByAlbum", body, parameters);
            logger.Debug("Done Executing photos.listByAlbum");
            return ret;
        }
        
        /// <summary>Get a user&apos;s photos</summary>
        /// <param name="scope">Required - Must be one of the following values [@recent] - The collection of photos to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual System.IO.Stream ListByScopeAsStream(string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByScope");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "listByScope", body, parameters);
            logger.Debug("Done Executing photos.listByScope");
            return ret;
        }
        
        /// <summary>Delete a photo</summary>
        /// <param name="albumId">Required - ID of the album to which to photo belongs.</param>
        /// <param name="photoId">Required - ID of the photo to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream Delete(string albumId, string photoId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing photos.delete");
            return ret;
        }
        
        /// <summary>Get photo metadata</summary>
        /// <param name="albumId">Required - ID of the album containing the photo.</param>
        /// <param name="photoId">Required - ID of the photo for which to get metadata.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.ChiliPhotosResourceJson Get(string albumId, string photoId, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.get");
            Google.Apis.Buzz.V1.Data.ChiliPhotosResourceJson ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.ChiliPhotosResourceJson>(this.service.ExecuteRequest(PhotosResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing photos.get");
            return ret;
        }
        
        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.AlbumLite Insert(Google.Apis.Buzz.V1.Data.AlbumLite body, string albumId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert");
            Google.Apis.Buzz.V1.Data.AlbumLite ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.AlbumLite>(this.service.ExecuteRequest(PhotosResource.Resource, "insert", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing photos.insert");
            return ret;
        }
        
        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.ChiliPhotosResourceJson Insert2(Google.Apis.Buzz.V1.Data.ChiliPhotosResourceJson body, string albumId, string userId, string alt, string hl) {
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert2");
            Google.Apis.Buzz.V1.Data.ChiliPhotosResourceJson ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.ChiliPhotosResourceJson>(this.service.ExecuteRequest(PhotosResource.Resource, "insert2", this.service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing photos.insert2");
            return ret;
        }
        
        /// <summary>List photos in an album</summary>
        /// <param name="albumId">Required - ID of the album for which to list photos.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.PhotosFeed ListByAlbum(string albumId, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByAlbum");
            Google.Apis.Buzz.V1.Data.PhotosFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.PhotosFeed>(this.service.ExecuteRequest(PhotosResource.Resource, "listByAlbum", body, parameters));
            logger.Debug("Done Executing photos.listByAlbum");
            return ret;
        }
        
        /// <summary>Get a user&apos;s photos</summary>
        /// <param name="scope">Required - Must be one of the following values [@recent] - The collection of photos to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Google.Apis.Buzz.V1.Data.PhotosFeed ListByScope(string scope, string userId, string alt, string c, string hl, long maxResults) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByScope");
            Google.Apis.Buzz.V1.Data.PhotosFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.PhotosFeed>(this.service.ExecuteRequest(PhotosResource.Resource, "listByScope", body, parameters));
            logger.Debug("Done Executing photos.listByScope");
            return ret;
        }
        
        /// <summary>Delete a photo</summary>
        /// <param name="albumIdValue">albumId - Required - ID of the album to which to photo belongs.</param>
        /// <param name="photoIdValue">photoId - Required - ID of the photo to delete.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Delete(string albumId, string photoId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "delete", body, parameters);
            logger.Debug("Done Executing photos.delete");
            return ret;
        }
        
        /// <summary>Get photo metadata</summary>
        /// <param name="albumIdValue">albumId - Required - ID of the album containing the photo.</param>
        /// <param name="photoIdValue">photoId - Required - ID of the photo for which to get metadata.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Get(string albumId, string photoId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.get");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing photos.get");
            return ret;
        }
        
        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumIdValue">albumId - Required - ID of the album to which to upload.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Insert(string body, string albumId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "insert", body, parameters);
            logger.Debug("Done Executing photos.insert");
            return ret;
        }
        
        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumIdValue">albumId - Required - ID of the album to which to upload.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream Insert2(string body, string albumId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.insert2");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "insert2", body, parameters);
            logger.Debug("Done Executing photos.insert2");
            return ret;
        }
        
        /// <summary>List photos in an album</summary>
        /// <param name="albumIdValue">albumId - Required - ID of the album for which to list photos.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream ListByAlbum(string albumId, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.listByAlbum");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "listByAlbum", body, parameters);
            logger.Debug("Done Executing photos.listByAlbum");
            return ret;
        }
        
        /// <summary>Get a user&apos;s photos</summary>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@recent] - The collection of photos to list.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream ListByScope(string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.listByScope");
            System.IO.Stream ret = this.service.ExecuteRequest(PhotosResource.Resource, "listByScope", body, parameters);
            logger.Debug("Done Executing photos.listByScope");
            return ret;
        }
    }
    
    public class RelatedResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "related";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(RelatedResource));
        
        public RelatedResource(BuzzService service) {
            this.service = service;
        }
        
        /// <summary>Get related links for an activity</summary>
        /// <param name="postId">Required - ID of the activity to which to get related links.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual System.IO.Stream ListAsStream(string postId, string scope, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing related.list");
            System.IO.Stream ret = this.service.ExecuteRequest(RelatedResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing related.list");
            return ret;
        }
        
        /// <summary>Get related links for an activity</summary>
        /// <param name="postId">Required - ID of the activity to which to get related links.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Google.Apis.Buzz.V1.Data.RelatedFeed List(string postId, string scope, string userId, string alt, string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing related.list");
            Google.Apis.Buzz.V1.Data.RelatedFeed ret = this.service.JsonToObject<Google.Apis.Buzz.V1.Data.RelatedFeed>(this.service.ExecuteRequest(RelatedResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing related.list");
            return ret;
        }
        
        /// <summary>Get related links for an activity</summary>
        /// <param name="postIdValue">postId - Required - ID of the activity to which to get related links.</param>
        /// <param name="scopeValue">scope - Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userIdValue">userId - Required - ID of the user being referenced.</param>
        public virtual System.IO.Stream List(string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing related.list");
            System.IO.Stream ret = this.service.ExecuteRequest(RelatedResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing related.list");
            return ret;
        }
    }
}
