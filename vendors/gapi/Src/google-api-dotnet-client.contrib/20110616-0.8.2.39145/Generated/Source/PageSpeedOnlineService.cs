//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Google.Apis.PageSpeedOnline.V1.Data {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    
    
    public class Result : Google.Apis.Requests.IResponse {
        
        private FormattedResultsData formattedResults;
        
        private string id;
        
        private IList<System.String> invalidRules;
        
        private string kind;
        
        private PageStatsData pageStats;
        
        private long responseCode;
        
        private long score;
        
        private string title;
        
        private VersionData version;
        
        private Google.Apis.Requests.RequestError error;
        
        /// <summary>Localized Page Speed results. Contains a ruleResults entry for each Page Speed rule instantiated and run by the server.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("formattedResults")]
        public virtual FormattedResultsData FormattedResults {
            get {
                return this.formattedResults;
            }
            set {
                this.formattedResults = value;
            }
        }
        
        /// <summary>Canonicalized and final URL for the document, after following page redirects (if any).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        /// <summary>List of rules that were specified in the request, but which the server did not know how to instantiate.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("invalidRules")]
        public virtual IList<System.String> InvalidRules {
            get {
                return this.invalidRules;
            }
            set {
                this.invalidRules = value;
            }
        }
        
        /// <summary>Kind of result.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Summary statistics for the page, such as number of JavaScript bytes, number of HTML bytes, etc.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pageStats")]
        public virtual PageStatsData PageStats {
            get {
                return this.pageStats;
            }
            set {
                this.pageStats = value;
            }
        }
        
        /// <summary>Response code for the document. 200 indicates a normal page load. 4xx/5xx indicates an error.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("responseCode")]
        public virtual long ResponseCode {
            get {
                return this.responseCode;
            }
            set {
                this.responseCode = value;
            }
        }
        
        /// <summary>The Page Speed Score (0-100), which indicates how much faster a page could be. A high score indicates little room for improvement, while a lower score indicates more room for improvement.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("score")]
        public virtual long Score {
            get {
                return this.score;
            }
            set {
                this.score = value;
            }
        }
        
        /// <summary>Title of the page, as displayed in the browser&apos;s title bar.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        /// <summary>The version of the Page Speed SDK used to generate these results.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public virtual VersionData Version {
            get {
                return this.version;
            }
            set {
                this.version = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        /// <summary>Localized Page Speed results. Contains a ruleResults entry for each Page Speed rule instantiated and run by the server.</summary>
        public class FormattedResultsData {
            
            private string locale;
            
            private RuleResultsData ruleResults;
            
            /// <summary>The locale of the formattedResults, e.g. &quot;en_US&quot;.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("locale")]
            public virtual string Locale {
                get {
                    return this.locale;
                }
                set {
                    this.locale = value;
                }
            }
            
            /// <summary>Dictionary of formatted rule results, with one entry for each Page Speed rule instantiated and run by the server.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("ruleResults")]
            public virtual RuleResultsData RuleResults {
                get {
                    return this.ruleResults;
                }
                set {
                    this.ruleResults = value;
                }
            }
            
            /// <summary>Dictionary of formatted rule results, with one entry for each Page Speed rule instantiated and run by the server.</summary>
            public class RuleResultsData {
            }
        }
        
        /// <summary>Summary statistics for the page, such as number of JavaScript bytes, number of HTML bytes, etc.</summary>
        public class PageStatsData {
            
            private string cssResponseBytes;
            
            private string flashResponseBytes;
            
            private string htmlResponseBytes;
            
            private string imageResponseBytes;
            
            private string javascriptResponseBytes;
            
            private long numberCssResources;
            
            private long numberHosts;
            
            private long numberJsResources;
            
            private long numberResources;
            
            private long numberStaticResources;
            
            private string otherResponseBytes;
            
            private string textResponseBytes;
            
            private string totalRequestBytes;
            
            /// <summary>Number of uncompressed response bytes for CSS resources on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("cssResponseBytes")]
            public virtual string CssResponseBytes {
                get {
                    return this.cssResponseBytes;
                }
                set {
                    this.cssResponseBytes = value;
                }
            }
            
            /// <summary>Number of response bytes for flash resources on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("flashResponseBytes")]
            public virtual string FlashResponseBytes {
                get {
                    return this.flashResponseBytes;
                }
                set {
                    this.flashResponseBytes = value;
                }
            }
            
            /// <summary>Number of uncompressed response bytes for the main HTML document and all iframes on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("htmlResponseBytes")]
            public virtual string HtmlResponseBytes {
                get {
                    return this.htmlResponseBytes;
                }
                set {
                    this.htmlResponseBytes = value;
                }
            }
            
            /// <summary>Number of response bytes for image resources on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("imageResponseBytes")]
            public virtual string ImageResponseBytes {
                get {
                    return this.imageResponseBytes;
                }
                set {
                    this.imageResponseBytes = value;
                }
            }
            
            /// <summary>Number of uncompressed response bytes for JS resources on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("javascriptResponseBytes")]
            public virtual string JavascriptResponseBytes {
                get {
                    return this.javascriptResponseBytes;
                }
                set {
                    this.javascriptResponseBytes = value;
                }
            }
            
            /// <summary>Number of CSS resources referenced by the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("numberCssResources")]
            public virtual long NumberCssResources {
                get {
                    return this.numberCssResources;
                }
                set {
                    this.numberCssResources = value;
                }
            }
            
            /// <summary>Number of unique hosts referenced by the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("numberHosts")]
            public virtual long NumberHosts {
                get {
                    return this.numberHosts;
                }
                set {
                    this.numberHosts = value;
                }
            }
            
            /// <summary>Number of JavaScript resources referenced by the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("numberJsResources")]
            public virtual long NumberJsResources {
                get {
                    return this.numberJsResources;
                }
                set {
                    this.numberJsResources = value;
                }
            }
            
            /// <summary>Number of HTTP resources loaded by the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("numberResources")]
            public virtual long NumberResources {
                get {
                    return this.numberResources;
                }
                set {
                    this.numberResources = value;
                }
            }
            
            /// <summary>Number of static (i.e. cacheable) resources on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("numberStaticResources")]
            public virtual long NumberStaticResources {
                get {
                    return this.numberStaticResources;
                }
                set {
                    this.numberStaticResources = value;
                }
            }
            
            /// <summary>Number of response bytes for other resources on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("otherResponseBytes")]
            public virtual string OtherResponseBytes {
                get {
                    return this.otherResponseBytes;
                }
                set {
                    this.otherResponseBytes = value;
                }
            }
            
            /// <summary>Number of uncompressed response bytes for text resources not covered by other statistics (i.e non-HTML, non-script, non-CSS resources) on the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("textResponseBytes")]
            public virtual string TextResponseBytes {
                get {
                    return this.textResponseBytes;
                }
                set {
                    this.textResponseBytes = value;
                }
            }
            
            /// <summary>Total size of all request bytes sent by the page.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("totalRequestBytes")]
            public virtual string TotalRequestBytes {
                get {
                    return this.totalRequestBytes;
                }
                set {
                    this.totalRequestBytes = value;
                }
            }
        }
        
        /// <summary>The version of the Page Speed SDK used to generate these results.</summary>
        public class VersionData {
            
            private long major;
            
            private long minor;
            
            /// <summary>The major version number of the Page Speed SDK used to generate these results.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("major")]
            public virtual long Major {
                get {
                    return this.major;
                }
                set {
                    this.major = value;
                }
            }
            
            /// <summary>The minor version number of the Page Speed SDK used to generate these results.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("minor")]
            public virtual long Minor {
                get {
                    return this.minor;
                }
                set {
                    this.minor = value;
                }
            }
        }
    }
}
namespace Google.Apis.PageSpeedOnline.V1 {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public class PagespeedonlineService : Google.Apis.Discovery.IRequestExecutor, Google.Apis.Discovery.ISchemaAwareRequestExecutor {
        
        private Google.Apis.Discovery.IService genericService;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Version = "v1";
        
        private const string Name = "pagespeedonline";
        
        private const string BaseUri = "https://www.googleapis.com//pagespeedonline/v1/";
        
        private const Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_1_0;
        
        private string developerKey;
        
        private PagespeedapiResource pagespeedapi;
        
        public PagespeedonlineService(Google.Apis.Discovery.IService genericService, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.genericService = genericService;
            this.authenticator = authenticator;
            this.pagespeedapi = new PagespeedapiResource(this);
        }
        
        public PagespeedonlineService() : 
                this(new Google.Apis.Discovery.DiscoveryService(new Google.Apis.Discovery.WebDiscoveryDevice(new System.Uri(string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", PagespeedonlineService.Name, PagespeedonlineService.Version)))).GetService(PagespeedonlineService.Version, PagespeedonlineService.DiscoveryVersionUsed, new Google.Apis.Discovery.FactoryParameterV1_0(new System.Uri(PagespeedonlineService.BaseUri))), Google.Apis.Authentication.AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {
        }
        
        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey {
            get {
                return this.developerKey;
            }
            set {
                this.developerKey = value;
            }
        }
        
        public virtual PagespeedapiResource Pagespeedapi {
            get {
                return this.pagespeedapi;
            }
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, string body, System.Collections.Generic.IDictionary<string, object> parameters) {
            Google.Apis.Requests.IRequest request = this.genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false) {
                request = request.WithDeveloperKey(this.DeveloperKey);
            }
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, object body, System.Collections.Generic.IDictionary<string, object> parameters) {
            return this.ExecuteRequest(resource, method, this.ObjectToJson(body), parameters);
        }
        
        public virtual void RegisterSerializer(Google.Apis.ISerializer serializer) {
            genericService.Serializer = serializer;
        }
        
        public virtual string ObjectToJson(object obj) {
            return genericService.SerializeRequest(obj);
        }
        
        public virtual T JsonToObject<T>(System.IO.Stream stream)
         {
            return genericService.DeserializeResponse<T>(stream);
        }
    }
    
    public class PagespeedapiResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "pagespeedapi";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(PagespeedapiResource));
        
        public PagespeedapiResource(PagespeedonlineService service) {
            this.service = service;
        }
        
        /// <summary>Runs Page Speed analysis on the page at the specified URL, and returns a Page Speed score, a list of suggestions to make that page faster, and other information.</summary>
        /// <param name="url">Required - Must match pattern http(s)?://.* - The URL to fetch and analyze</param>
        /// <param name="locale">Optional - Must match pattern [a-zA-Z]+(_[a-zA-Z]+)? - The locale used to localize formatted results</param>
        /// <param name="rule">Optional - Must match pattern [a-zA-Z]+ - A Page Speed rule to run; if none are given, all rules are run</param>
        /// <param name="strategy">Optional - Must be one of the following values [desktop, mobile] - The analysis strategy to use</param>
        public virtual System.IO.Stream RunpagespeedAsStream(string url, string locale, Google.Apis.Util.Repeatable<string> rule, string strategy) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["url"] = url;
            parameters["locale"] = locale;
            parameters["rule"] = rule;
            parameters["strategy"] = strategy;
            logger.Debug("Executing pagespeedapi.runpagespeed");
            System.IO.Stream ret = this.service.ExecuteRequest(PagespeedapiResource.Resource, "runpagespeed", body, parameters);
            logger.Debug("Done Executing pagespeedapi.runpagespeed");
            return ret;
        }
        
        /// <summary>Runs Page Speed analysis on the page at the specified URL, and returns a Page Speed score, a list of suggestions to make that page faster, and other information.</summary>
        /// <param name="url">Required - Must match pattern http(s)?://.* - The URL to fetch and analyze</param>
        /// <param name="locale">Optional - Must match pattern [a-zA-Z]+(_[a-zA-Z]+)? - The locale used to localize formatted results</param>
        /// <param name="rule">Optional - Must match pattern [a-zA-Z]+ - A Page Speed rule to run; if none are given, all rules are run</param>
        /// <param name="strategy">Optional - Must be one of the following values [desktop, mobile] - The analysis strategy to use</param>
        public virtual Google.Apis.PageSpeedOnline.V1.Data.Result Runpagespeed(string url, string locale, Google.Apis.Util.Repeatable<string> rule, string strategy) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["url"] = url;
            parameters["locale"] = locale;
            parameters["rule"] = rule;
            parameters["strategy"] = strategy;
            logger.Debug("Executing pagespeedapi.runpagespeed");
            Google.Apis.PageSpeedOnline.V1.Data.Result ret = this.service.JsonToObject<Google.Apis.PageSpeedOnline.V1.Data.Result>(this.service.ExecuteRequest(PagespeedapiResource.Resource, "runpagespeed", body, parameters));
            logger.Debug("Done Executing pagespeedapi.runpagespeed");
            return ret;
        }
        
        /// <summary>Runs Page Speed analysis on the page at the specified URL, and returns a Page Speed score, a list of suggestions to make that page faster, and other information.</summary>
        /// <param name="urlValue">url - Required - Must match pattern http(s)?://.* - The URL to fetch and analyze</param>
        public virtual System.IO.Stream Runpagespeed(string url, System.Collections.Generic.IDictionary<string, object> parameters) {
            string body = null;
            parameters["url"] = url;
            logger.Debug("Executing pagespeedapi.runpagespeed");
            System.IO.Stream ret = this.service.ExecuteRequest(PagespeedapiResource.Resource, "runpagespeed", body, parameters);
            logger.Debug("Done Executing pagespeedapi.runpagespeed");
            return ret;
        }
    }
}
