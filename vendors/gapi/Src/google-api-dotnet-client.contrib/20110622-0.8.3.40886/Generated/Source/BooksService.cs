//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Google.Apis.Books.V1.Data {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    
    
    public class Bookshelf : Google.Apis.Requests.IResponse {
        
        private string access;
        
        private string created;
        
        private string description;
        
        private long id;
        
        private string kind;
        
        private string selfLink;
        
        private string title;
        
        private string updated;
        
        private long volumeCount;
        
        private string volumesLastUpdated;
        
        private Google.Apis.Requests.RequestError error;
        
        /// <summary>Whether this bookshelf is PUBLIC or PRIVATE.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("access")]
        public virtual string Access {
            get {
                return this.access;
            }
            set {
                this.access = value;
            }
        }
        
        /// <summary>Created time for this bookshelf (formatted UTC timestamp with millisecond resolution).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("created")]
        public virtual string Created {
            get {
                return this.created;
            }
            set {
                this.created = value;
            }
        }
        
        /// <summary>Description of this bookshelf.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public virtual string Description {
            get {
                return this.description;
            }
            set {
                this.description = value;
            }
        }
        
        /// <summary>Id of this bookshelf, only unique by user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual long Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        /// <summary>Resource type for bookshelf metadata.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>URL to this resource.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
        public virtual string SelfLink {
            get {
                return this.selfLink;
            }
            set {
                this.selfLink = value;
            }
        }
        
        /// <summary>Title of this bookshelf.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        /// <summary>Last modified time of this bookshelf (formatted UTC timestamp with millisecond resolution).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        /// <summary>Number of volumes in this bookshelf.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("volumeCount")]
        public virtual long VolumeCount {
            get {
                return this.volumeCount;
            }
            set {
                this.volumeCount = value;
            }
        }
        
        /// <summary>Last time a volume was added or removed from this bookshelf (formatted UTC timestamp with millisecond resolution).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("volumesLastUpdated")]
        public virtual string VolumesLastUpdated {
            get {
                return this.volumesLastUpdated;
            }
            set {
                this.volumesLastUpdated = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
    
    public class Bookshelves : Google.Apis.Requests.IResponse {
        
        private IList<Bookshelf> items;
        
        private string kind;
        
        private Google.Apis.Requests.RequestError error;
        
        /// <summary>A list of bookshelves.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Bookshelf> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        /// <summary>Resource type.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
    
    public class DownloadAccessRestriction {
        
        private bool deviceAllowed;
        
        private long downloadsAcquired;
        
        private string kind;
        
        private long maxDownloadDevices;
        
        private string message;
        
        private string nonce;
        
        private string reasonCode;
        
        private bool restricted;
        
        private string signature;
        
        private string source;
        
        private string volumeId;
        
        /// <summary>If restricted, whether access is granted for this (user, device, volume).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("deviceAllowed")]
        public virtual bool DeviceAllowed {
            get {
                return this.deviceAllowed;
            }
            set {
                this.deviceAllowed = value;
            }
        }
        
        /// <summary>If restricted, the number of content download licenses already acquired (including the requesting client, if licensed).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("downloadsAcquired")]
        public virtual long DownloadsAcquired {
            get {
                return this.downloadsAcquired;
            }
            set {
                this.downloadsAcquired = value;
            }
        }
        
        /// <summary>Resource type.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>If restricted, the maximum number of content download licenses for this volume.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("maxDownloadDevices")]
        public virtual long MaxDownloadDevices {
            get {
                return this.maxDownloadDevices;
            }
            set {
                this.maxDownloadDevices = value;
            }
        }
        
        /// <summary>Error/warning message.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("message")]
        public virtual string Message {
            get {
                return this.message;
            }
            set {
                this.message = value;
            }
        }
        
        /// <summary>Client nonce for verification. Download access and client-validation only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("nonce")]
        public virtual string Nonce {
            get {
                return this.nonce;
            }
            set {
                this.nonce = value;
            }
        }
        
        /// <summary>Error/warning reason code.  Additional codes may be added in the future. 0   OK 100   ACCESS_DENIED_PUBLISHER_LIMIT 101   ACCESS_DENIED_LIMIT 200   WARNING_USED_LAST_ACCESS</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("reasonCode")]
        public virtual string ReasonCode {
            get {
                return this.reasonCode;
            }
            set {
                this.reasonCode = value;
            }
        }
        
        /// <summary>Whether this volume has any download access restrictions.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("restricted")]
        public virtual bool Restricted {
            get {
                return this.restricted;
            }
            set {
                this.restricted = value;
            }
        }
        
        /// <summary>Response signature.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("signature")]
        public virtual string Signature {
            get {
                return this.signature;
            }
            set {
                this.signature = value;
            }
        }
        
        /// <summary>Client app identifier for verification. Download access and client-validation only.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("source")]
        public virtual string Source {
            get {
                return this.source;
            }
            set {
                this.source = value;
            }
        }
        
        /// <summary>Identifies the volume for which this entry applies.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("volumeId")]
        public virtual string VolumeId {
            get {
                return this.volumeId;
            }
            set {
                this.volumeId = value;
            }
        }
    }
    
    public class ReadingPosition {
        
        private string epubCfiPosition;
        
        private string gbImagePosition;
        
        private string gbTextPosition;
        
        private string kind;
        
        private string pdfPosition;
        
        private string updated;
        
        private string volumeId;
        
        /// <summary>Position in an EPUB as a CFI.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("epubCfiPosition")]
        public virtual string EpubCfiPosition {
            get {
                return this.epubCfiPosition;
            }
            set {
                this.epubCfiPosition = value;
            }
        }
        
        /// <summary>Position in a volume for image-based content.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gbImagePosition")]
        public virtual string GbImagePosition {
            get {
                return this.gbImagePosition;
            }
            set {
                this.gbImagePosition = value;
            }
        }
        
        /// <summary>Position in a volume for text-based content.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gbTextPosition")]
        public virtual string GbTextPosition {
            get {
                return this.gbTextPosition;
            }
            set {
                this.gbTextPosition = value;
            }
        }
        
        /// <summary>Resource type for a reading position.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Position in a PDF file.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pdfPosition")]
        public virtual string PdfPosition {
            get {
                return this.pdfPosition;
            }
            set {
                this.pdfPosition = value;
            }
        }
        
        /// <summary>Timestamp when this reading position was last updated (formatted UTC timestamp with millisecond resolution).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("updated")]
        public virtual string Updated {
            get {
                return this.updated;
            }
            set {
                this.updated = value;
            }
        }
        
        /// <summary>Volume id associated with this reading position.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("volumeId")]
        public virtual string VolumeId {
            get {
                return this.volumeId;
            }
            set {
                this.volumeId = value;
            }
        }
    }
    
    public class Review {
        
        private AuthorData author;
        
        private string content;
        
        private string date;
        
        private string fullTextUrl;
        
        private string kind;
        
        private string rating;
        
        private SourceData source;
        
        private string title;
        
        private string type;
        
        private string volumeId;
        
        /// <summary>Author of this review.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("author")]
        public virtual AuthorData Author {
            get {
                return this.author;
            }
            set {
                this.author = value;
            }
        }
        
        /// <summary>Review text.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("content")]
        public virtual string Content {
            get {
                return this.content;
            }
            set {
                this.content = value;
            }
        }
        
        /// <summary>Date of this review.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public virtual string Date {
            get {
                return this.date;
            }
            set {
                this.date = value;
            }
        }
        
        /// <summary>URL for the full review text, for reviews gathered from the web.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fullTextUrl")]
        public virtual string FullTextUrl {
            get {
                return this.fullTextUrl;
            }
            set {
                this.fullTextUrl = value;
            }
        }
        
        /// <summary>Resource type for a review.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Star rating for this review. Possible values are ONE, TWO, THREE, FOUR, FIVE or NOT_RATED.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rating")]
        public virtual string Rating {
            get {
                return this.rating;
            }
            set {
                this.rating = value;
            }
        }
        
        /// <summary>Information regarding the source of this review, when the review is not from a Google Books user.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("source")]
        public virtual SourceData Source {
            get {
                return this.source;
            }
            set {
                this.source = value;
            }
        }
        
        /// <summary>Title for this review.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("title")]
        public virtual string Title {
            get {
                return this.title;
            }
            set {
                this.title = value;
            }
        }
        
        /// <summary>Source type for this review. Possible values are EDITORIAL, WEB_USER or GOOGLE_USER.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public virtual string Type {
            get {
                return this.type;
            }
            set {
                this.type = value;
            }
        }
        
        /// <summary>Volume that this review is for.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("volumeId")]
        public virtual string VolumeId {
            get {
                return this.volumeId;
            }
            set {
                this.volumeId = value;
            }
        }
        
        /// <summary>Author of this review.</summary>
        public class AuthorData {
            
            private string displayName;
            
            /// <summary>Name of this person.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("displayName")]
            public virtual string DisplayName {
                get {
                    return this.displayName;
                }
                set {
                    this.displayName = value;
                }
            }
        }
        
        /// <summary>Information regarding the source of this review, when the review is not from a Google Books user.</summary>
        public class SourceData {
            
            private string description;
            
            private string extraDescription;
            
            private string url;
            
            /// <summary>Name of the source.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("description")]
            public virtual string Description {
                get {
                    return this.description;
                }
                set {
                    this.description = value;
                }
            }
            
            /// <summary>Extra text about the source of the review.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("extraDescription")]
            public virtual string ExtraDescription {
                get {
                    return this.extraDescription;
                }
                set {
                    this.extraDescription = value;
                }
            }
            
            /// <summary>URL of the source of the review.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("url")]
            public virtual string Url {
                get {
                    return this.url;
                }
                set {
                    this.url = value;
                }
            }
        }
    }
    
    public class Volume : Google.Apis.Requests.IResponse {
        
        private AccessInfoData accessInfo;
        
        private string etag;
        
        private string id;
        
        private string kind;
        
        private SaleInfoData saleInfo;
        
        private string selfLink;
        
        private UserInfoData userInfo;
        
        private VolumeInfoData volumeInfo;
        
        private Google.Apis.Requests.RequestError error;
        
        /// <summary>Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accessInfo")]
        public virtual AccessInfoData AccessInfo {
            get {
                return this.accessInfo;
            }
            set {
                this.accessInfo = value;
            }
        }
        
        /// <summary>Opaque identifier for a specific version of a volume resource. (in LITE projection)</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("etag")]
        public virtual string Etag {
            get {
                return this.etag;
            }
            set {
                this.etag = value;
            }
        }
        
        /// <summary>Unique identifier for a volume. (in LITE projection)</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("id")]
        public virtual string Id {
            get {
                return this.id;
            }
            set {
                this.id = value;
            }
        }
        
        /// <summary>Resource type for a volume. (in LITE projection)</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("saleInfo")]
        public virtual SaleInfoData SaleInfo {
            get {
                return this.saleInfo;
            }
            set {
                this.saleInfo = value;
            }
        }
        
        /// <summary>URL to this resource. (in LITE projection)</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("selfLink")]
        public virtual string SelfLink {
            get {
                return this.selfLink;
            }
            set {
                this.selfLink = value;
            }
        }
        
        /// <summary>User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("userInfo")]
        public virtual UserInfoData UserInfo {
            get {
                return this.userInfo;
            }
            set {
                this.userInfo = value;
            }
        }
        
        /// <summary>General volume information.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("volumeInfo")]
        public virtual VolumeInfoData VolumeInfo {
            get {
                return this.volumeInfo;
            }
            set {
                this.volumeInfo = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        /// <summary>Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).</summary>
        public class AccessInfoData {
            
            private string accessViewStatus;
            
            private string country;
            
            private DownloadAccessRestriction downloadAccess;
            
            private bool embeddable;
            
            private EpubData epub;
            
            private PdfData pdf;
            
            private bool publicDomain;
            
            private bool textToSpeechAllowed;
            
            private string viewability;
            
            /// <summary>Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("accessViewStatus")]
            public virtual string AccessViewStatus {
                get {
                    return this.accessViewStatus;
                }
                set {
                    this.accessViewStatus = value;
                }
            }
            
            /// <summary>The two-letter ISO_3166-1 country code for which this access information is valid. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("country")]
            public virtual string Country {
                get {
                    return this.country;
                }
                set {
                    this.country = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("downloadAccess")]
            public virtual DownloadAccessRestriction DownloadAccess {
                get {
                    return this.downloadAccess;
                }
                set {
                    this.downloadAccess = value;
                }
            }
            
            /// <summary>Whether this volume can be embedded in a viewport using the Embedded Viewer API.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("embeddable")]
            public virtual bool Embeddable {
                get {
                    return this.embeddable;
                }
                set {
                    this.embeddable = value;
                }
            }
            
            /// <summary>Information about epub content. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("epub")]
            public virtual EpubData Epub {
                get {
                    return this.epub;
                }
                set {
                    this.epub = value;
                }
            }
            
            /// <summary>Information about pdf content. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("pdf")]
            public virtual PdfData Pdf {
                get {
                    return this.pdf;
                }
                set {
                    this.pdf = value;
                }
            }
            
            /// <summary>Whether or not this book is public domain in the country listed above.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("publicDomain")]
            public virtual bool PublicDomain {
                get {
                    return this.publicDomain;
                }
                set {
                    this.publicDomain = value;
                }
            }
            
            /// <summary>Whether the publisher allows this book to be processed with text-to-speech for the user.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("textToSpeechAllowed")]
            public virtual bool TextToSpeechAllowed {
                get {
                    return this.textToSpeechAllowed;
                }
                set {
                    this.textToSpeechAllowed = value;
                }
            }
            
            /// <summary>The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("viewability")]
            public virtual string Viewability {
                get {
                    return this.viewability;
                }
                set {
                    this.viewability = value;
                }
            }
            
            /// <summary>Information about epub content. (in LITE projection)</summary>
            public class EpubData {
                
                private string acsTokenLink;
                
                private string downloadLink;
                
                /// <summary>URL to retrieve ACS token for epub download. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("acsTokenLink")]
                public virtual string AcsTokenLink {
                    get {
                        return this.acsTokenLink;
                    }
                    set {
                        this.acsTokenLink = value;
                    }
                }
                
                /// <summary>URL to download epub. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("downloadLink")]
                public virtual string DownloadLink {
                    get {
                        return this.downloadLink;
                    }
                    set {
                        this.downloadLink = value;
                    }
                }
            }
            
            /// <summary>Information about pdf content. (in LITE projection)</summary>
            public class PdfData {
                
                private string acsTokenLink;
                
                private string downloadLink;
                
                /// <summary>URL to retrieve ACS token for pdf download. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("acsTokenLink")]
                public virtual string AcsTokenLink {
                    get {
                        return this.acsTokenLink;
                    }
                    set {
                        this.acsTokenLink = value;
                    }
                }
                
                /// <summary>URL to download pdf. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("downloadLink")]
                public virtual string DownloadLink {
                    get {
                        return this.downloadLink;
                    }
                    set {
                        this.downloadLink = value;
                    }
                }
            }
        }
        
        /// <summary>Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).</summary>
        public class SaleInfoData {
            
            private string buyLink;
            
            private string country;
            
            private bool isEbook;
            
            private ListPriceData listPrice;
            
            private RetailPriceData retailPrice;
            
            private string saleability;
            
            /// <summary>URL to purchase this volume on the Google Books site. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("buyLink")]
            public virtual string BuyLink {
                get {
                    return this.buyLink;
                }
                set {
                    this.buyLink = value;
                }
            }
            
            /// <summary>The two-letter ISO_3166-1 country code for which this sale information is valid. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("country")]
            public virtual string Country {
                get {
                    return this.country;
                }
                set {
                    this.country = value;
                }
            }
            
            /// <summary>Whether or not this volume is an eBook (can be added to the My eBooks shelf).</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("isEbook")]
            public virtual bool IsEbook {
                get {
                    return this.isEbook;
                }
                set {
                    this.isEbook = value;
                }
            }
            
            /// <summary>Suggested retail price. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("listPrice")]
            public virtual ListPriceData ListPrice {
                get {
                    return this.listPrice;
                }
                set {
                    this.listPrice = value;
                }
            }
            
            /// <summary>The actual selling price of the book. This is the same as the suggested retail or list price unless there are offers or discounts on this volume. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("retailPrice")]
            public virtual RetailPriceData RetailPrice {
                get {
                    return this.retailPrice;
                }
                set {
                    this.retailPrice = value;
                }
            }
            
            /// <summary>Whether or not this book is available for sale or offered for free in the Google eBookstore for the country listed above. Possible values are FOR_SALE, FREE or NOT_FOR_SALE.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("saleability")]
            public virtual string Saleability {
                get {
                    return this.saleability;
                }
                set {
                    this.saleability = value;
                }
            }
            
            /// <summary>Suggested retail price. (in LITE projection)</summary>
            public class ListPriceData {
                
                private double amount;
                
                private string currencyCode;
                
                /// <summary>Amount in the currency listed below. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("amount")]
                public virtual double Amount {
                    get {
                        return this.amount;
                    }
                    set {
                        this.amount = value;
                    }
                }
                
                /// <summary>An ISO 4217, three-letter currency code. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("currencyCode")]
                public virtual string CurrencyCode {
                    get {
                        return this.currencyCode;
                    }
                    set {
                        this.currencyCode = value;
                    }
                }
            }
            
            /// <summary>The actual selling price of the book. This is the same as the suggested retail or list price unless there are offers or discounts on this volume. (in LITE projection)</summary>
            public class RetailPriceData {
                
                private double amount;
                
                private string currencyCode;
                
                /// <summary>Amount in the currency listed below. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("amount")]
                public virtual double Amount {
                    get {
                        return this.amount;
                    }
                    set {
                        this.amount = value;
                    }
                }
                
                /// <summary>An ISO 4217, three-letter currency code. (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("currencyCode")]
                public virtual string CurrencyCode {
                    get {
                        return this.currencyCode;
                    }
                    set {
                        this.currencyCode = value;
                    }
                }
            }
        }
        
        /// <summary>User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)</summary>
        public class UserInfoData {
            
            private bool isPurchased;
            
            private ReadingPosition readingPosition;
            
            private Review review;
            
            private string updated;
            
            /// <summary>Whether or not this volume was purchased by the authenticated user making the request. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("isPurchased")]
            public virtual bool IsPurchased {
                get {
                    return this.isPurchased;
                }
                set {
                    this.isPurchased = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("readingPosition")]
            public virtual ReadingPosition ReadingPosition {
                get {
                    return this.readingPosition;
                }
                set {
                    this.readingPosition = value;
                }
            }
            
            [Newtonsoft.Json.JsonPropertyAttribute("review")]
            public virtual Review Review {
                get {
                    return this.review;
                }
                set {
                    this.review = value;
                }
            }
            
            /// <summary>Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("updated")]
            public virtual string Updated {
                get {
                    return this.updated;
                }
                set {
                    this.updated = value;
                }
            }
        }
        
        /// <summary>General volume information.</summary>
        public class VolumeInfoData {
            
            private IList<System.String> authors;
            
            private double averageRating;
            
            private IList<System.String> categories;
            
            private string contentVersion;
            
            private string description;
            
            private DimensionsData dimensions;
            
            private ImageLinksData imageLinks;
            
            private IList<IndustryIdentifiersData> industryIdentifiers;
            
            private string infoLink;
            
            private string language;
            
            private string mainCategory;
            
            private long pageCount;
            
            private string previewLink;
            
            private string printType;
            
            private string publishedDate;
            
            private string publisher;
            
            private long ratingsCount;
            
            private string subtitle;
            
            private string title;
            
            /// <summary>The names of the authors and/or editors for this volume. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("authors")]
            public virtual IList<System.String> Authors {
                get {
                    return this.authors;
                }
                set {
                    this.authors = value;
                }
            }
            
            /// <summary>The mean review rating for this volume. (min = 1.0, max = 5.0)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("averageRating")]
            public virtual double AverageRating {
                get {
                    return this.averageRating;
                }
                set {
                    this.averageRating = value;
                }
            }
            
            /// <summary>A list of subject categories, such as &quot;Fiction&quot;, &quot;Suspense&quot;, etc.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("categories")]
            public virtual IList<System.String> Categories {
                get {
                    return this.categories;
                }
                set {
                    this.categories = value;
                }
            }
            
            /// <summary>An identifier for the version of the volume content (text &amp; images). (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("contentVersion")]
            public virtual string ContentVersion {
                get {
                    return this.contentVersion;
                }
                set {
                    this.contentVersion = value;
                }
            }
            
            /// <summary>A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as &lt;b&gt;, &lt;i&gt;, &lt;br&gt;, etc. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("description")]
            public virtual string Description {
                get {
                    return this.description;
                }
                set {
                    this.description = value;
                }
            }
            
            /// <summary>Physical dimensions of this volume.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("dimensions")]
            public virtual DimensionsData Dimensions {
                get {
                    return this.dimensions;
                }
                set {
                    this.dimensions = value;
                }
            }
            
            /// <summary>A list of image links for all the sizes that are available. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("imageLinks")]
            public virtual ImageLinksData ImageLinks {
                get {
                    return this.imageLinks;
                }
                set {
                    this.imageLinks = value;
                }
            }
            
            /// <summary>Industry standard identifiers for this volume.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("industryIdentifiers")]
            public virtual IList<IndustryIdentifiersData> IndustryIdentifiers {
                get {
                    return this.industryIdentifiers;
                }
                set {
                    this.industryIdentifiers = value;
                }
            }
            
            /// <summary>URL to view information about this volume on the Google Books site. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("infoLink")]
            public virtual string InfoLink {
                get {
                    return this.infoLink;
                }
                set {
                    this.infoLink = value;
                }
            }
            
            /// <summary>Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as &apos;fr&apos;, &apos;en&apos;, etc.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("language")]
            public virtual string Language {
                get {
                    return this.language;
                }
                set {
                    this.language = value;
                }
            }
            
            /// <summary>The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("mainCategory")]
            public virtual string MainCategory {
                get {
                    return this.mainCategory;
                }
                set {
                    this.mainCategory = value;
                }
            }
            
            /// <summary>Total number of pages.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("pageCount")]
            public virtual long PageCount {
                get {
                    return this.pageCount;
                }
                set {
                    this.pageCount = value;
                }
            }
            
            /// <summary>URL to preview this volume on the Google Books site.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("previewLink")]
            public virtual string PreviewLink {
                get {
                    return this.previewLink;
                }
                set {
                    this.previewLink = value;
                }
            }
            
            /// <summary>Type of publication of this volume. Possible values are BOOK or MAGAZINE.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("printType")]
            public virtual string PrintType {
                get {
                    return this.printType;
                }
                set {
                    this.printType = value;
                }
            }
            
            /// <summary>Date of publication. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("publishedDate")]
            public virtual string PublishedDate {
                get {
                    return this.publishedDate;
                }
                set {
                    this.publishedDate = value;
                }
            }
            
            /// <summary>Publisher of this volume. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("publisher")]
            public virtual string Publisher {
                get {
                    return this.publisher;
                }
                set {
                    this.publisher = value;
                }
            }
            
            /// <summary>The number of review ratings for this volume.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("ratingsCount")]
            public virtual long RatingsCount {
                get {
                    return this.ratingsCount;
                }
                set {
                    this.ratingsCount = value;
                }
            }
            
            /// <summary>Volume subtitle. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("subtitle")]
            public virtual string Subtitle {
                get {
                    return this.subtitle;
                }
                set {
                    this.subtitle = value;
                }
            }
            
            /// <summary>Volume title. (in LITE projection)</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("title")]
            public virtual string Title {
                get {
                    return this.title;
                }
                set {
                    this.title = value;
                }
            }
            
            /// <summary>Physical dimensions of this volume.</summary>
            public class DimensionsData {
                
                private string height;
                
                private string thickness;
                
                private string width;
                
                /// <summary>Height or length of this volume (in cm).</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("height")]
                public virtual string Height {
                    get {
                        return this.height;
                    }
                    set {
                        this.height = value;
                    }
                }
                
                /// <summary>Thickness of this volume (in cm).</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("thickness")]
                public virtual string Thickness {
                    get {
                        return this.thickness;
                    }
                    set {
                        this.thickness = value;
                    }
                }
                
                /// <summary>Width of this volume (in cm).</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("width")]
                public virtual string Width {
                    get {
                        return this.width;
                    }
                    set {
                        this.width = value;
                    }
                }
            }
            
            /// <summary>A list of image links for all the sizes that are available. (in LITE projection)</summary>
            public class ImageLinksData {
                
                private string extraLarge;
                
                private string large;
                
                private string medium;
                
                private string small;
                
                private string smallThumbnail;
                
                private string thumbnail;
                
                /// <summary>Image link for extra large size (width of ~1280 pixels). (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("extraLarge")]
                public virtual string ExtraLarge {
                    get {
                        return this.extraLarge;
                    }
                    set {
                        this.extraLarge = value;
                    }
                }
                
                /// <summary>Image link for large size (width of ~800 pixels). (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("large")]
                public virtual string Large {
                    get {
                        return this.large;
                    }
                    set {
                        this.large = value;
                    }
                }
                
                /// <summary>Image link for medium size (width of ~575 pixels). (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("medium")]
                public virtual string Medium {
                    get {
                        return this.medium;
                    }
                    set {
                        this.medium = value;
                    }
                }
                
                /// <summary>Image link for small size (width of ~300 pixels). (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("small")]
                public virtual string Small {
                    get {
                        return this.small;
                    }
                    set {
                        this.small = value;
                    }
                }
                
                /// <summary>Image link for small thumbnail size (width of ~80 pixels). (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("smallThumbnail")]
                public virtual string SmallThumbnail {
                    get {
                        return this.smallThumbnail;
                    }
                    set {
                        this.smallThumbnail = value;
                    }
                }
                
                /// <summary>Image link for thumbnail size (width of ~128 pixels). (in LITE projection)</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("thumbnail")]
                public virtual string Thumbnail {
                    get {
                        return this.thumbnail;
                    }
                    set {
                        this.thumbnail = value;
                    }
                }
            }
            
            public class IndustryIdentifiersData {
                
                private string identifier;
                
                private string type;
                
                /// <summary>Industry specific volume identifier.</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("identifier")]
                public virtual string Identifier {
                    get {
                        return this.identifier;
                    }
                    set {
                        this.identifier = value;
                    }
                }
                
                /// <summary>Identifier type. Possible values are ISBN_10, ISBN_13, ISSN and OTHER.</summary>
                [Newtonsoft.Json.JsonPropertyAttribute("type")]
                public virtual string Type {
                    get {
                        return this.type;
                    }
                    set {
                        this.type = value;
                    }
                }
            }
        }
    }
    
    public class Volumes : Google.Apis.Requests.IResponse {
        
        private IList<Volume> items;
        
        private string kind;
        
        private long totalItems;
        
        private Google.Apis.Requests.RequestError error;
        
        /// <summary>A list of volumes.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Volume> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        /// <summary>Resource type.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Total number of volumes found. This might be greater than the number of volumes returned in this response if results have been paginated.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("totalItems")]
        public virtual long TotalItems {
            get {
                return this.totalItems;
            }
            set {
                this.totalItems = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
    }
}
namespace Google.Apis.Books.V1 {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public class BooksService : Google.Apis.Discovery.IRequestExecutor, Google.Apis.Discovery.ISchemaAwareRequestExecutor {
        
        private Google.Apis.Discovery.IService genericService;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Version = "v1";
        
        private const string Name = "books";
        
        private const string BaseUri = "https://www.googleapis.com/books/v1/";
        
        private const Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_1_0;
        
        private string developerKey;
        
        private BookshelvesResource bookshelves;
        
        private MylibraryResource mylibrary;
        
        private VolumesResource volumes;
        
        public BooksService(Google.Apis.Discovery.IService genericService, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.genericService = genericService;
            this.authenticator = authenticator;
            this.bookshelves = new BookshelvesResource(this);
            this.mylibrary = new MylibraryResource(this);
            this.volumes = new VolumesResource(this);
        }
        
        public BooksService() : 
                this(new Google.Apis.Discovery.DiscoveryService(new Google.Apis.Discovery.WebDiscoveryDevice(new System.Uri(string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", BooksService.Name, BooksService.Version)))).GetService(BooksService.Version, BooksService.DiscoveryVersionUsed, new Google.Apis.Discovery.FactoryParameterV1_0(new System.Uri(BooksService.BaseUri))), Google.Apis.Authentication.AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {
        }
        
        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey {
            get {
                return this.developerKey;
            }
            set {
                this.developerKey = value;
            }
        }
        
        public virtual BookshelvesResource Bookshelves {
            get {
                return this.bookshelves;
            }
        }
        
        public virtual MylibraryResource Mylibrary {
            get {
                return this.mylibrary;
            }
        }
        
        public virtual VolumesResource Volumes {
            get {
                return this.volumes;
            }
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, string body, System.Collections.Generic.IDictionary<string, object> parameters) {
            Google.Apis.Requests.IRequest request = this.genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false) {
                request = request.WithDeveloperKey(this.DeveloperKey);
            }
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, object body, System.Collections.Generic.IDictionary<string, object> parameters) {
            return this.ExecuteRequest(resource, method, this.ObjectToJson(body), parameters);
        }
        
        public virtual void RegisterSerializer(Google.Apis.ISerializer serializer) {
            genericService.Serializer = serializer;
        }
        
        public virtual string ObjectToJson(object obj) {
            return genericService.SerializeRequest(obj);
        }
        
        public virtual T JsonToObject<T>(System.IO.Stream stream)
         {
            return genericService.DeserializeResponse<T>(stream);
        }
    }
    
    public class BookshelvesResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "bookshelves";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(BookshelvesResource));
        
        private VolumesResource volumes;
        
        public BookshelvesResource(BooksService service) {
            this.service = service;
            this.volumes = new VolumesResource(service);
        }
        
        public virtual VolumesResource Volumes {
            get {
                return this.volumes;
            }
        }
        
        /// <summary>Retrieves a specific bookshelf for the specified user.</summary>
        /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual System.IO.Stream GetAsStream(string shelf, string userId, string source) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["shelf"] = shelf;
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.get");
            System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing bookshelves.get");
            return ret;
        }
        
        /// <summary>Retrieves a list of public bookshelves for the specified user.</summary>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual System.IO.Stream ListAsStream(string userId, string source) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.list");
            System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing bookshelves.list");
            return ret;
        }
        
        /// <summary>Retrieves a specific bookshelf for the specified user.</summary>
        /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Google.Apis.Books.V1.Data.Bookshelf Get(string shelf, string userId, string source) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["shelf"] = shelf;
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.get");
            Google.Apis.Books.V1.Data.Bookshelf ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Bookshelf>(this.service.ExecuteRequest(BookshelvesResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing bookshelves.get");
            return ret;
        }
        
        /// <summary>Retrieves a list of public bookshelves for the specified user.</summary>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Google.Apis.Books.V1.Data.Bookshelves List(string userId, string source) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.list");
            Google.Apis.Books.V1.Data.Bookshelves ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Bookshelves>(this.service.ExecuteRequest(BookshelvesResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing bookshelves.list");
            return ret;
        }
        
        public class VolumesResource {
            
            private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
            
            private const string Resource = "bookshelves.volumes";
            
            private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(VolumesResource));
            
            public VolumesResource(BooksService service) {
                this.service = service;
            }
            
            /// <summary>Retrieves volumes in a specific bookshelf for the specified user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve volumes.</param>
            /// <param name="userId">Required - Id of user for whom to retrieve bookshelf volumes.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream ListAsStream(string shelf, string userId, string source) {
                string body = null;
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["userId"] = userId;
                parameters["source"] = source;
                logger.Debug("Executing volumes.list");
                System.IO.Stream ret = this.service.ExecuteRequest(VolumesResource.Resource, "list", body, parameters);
                logger.Debug("Done Executing volumes.list");
                return ret;
            }
            
            /// <summary>Retrieves volumes in a specific bookshelf for the specified user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve volumes.</param>
            /// <param name="userId">Required - Id of user for whom to retrieve bookshelf volumes.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Google.Apis.Books.V1.Data.Volumes List(string shelf, string userId, string source) {
                string body = null;
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["userId"] = userId;
                parameters["source"] = source;
                logger.Debug("Executing volumes.list");
                Google.Apis.Books.V1.Data.Volumes ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Volumes>(this.service.ExecuteRequest(VolumesResource.Resource, "list", body, parameters));
                logger.Debug("Done Executing volumes.list");
                return ret;
            }
        }
    }
    
    public class MylibraryResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "mylibrary";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(MylibraryResource));
        
        private BookshelvesResource bookshelves;
        
        public MylibraryResource(BooksService service) {
            this.service = service;
            this.bookshelves = new BookshelvesResource(service);
        }
        
        public virtual BookshelvesResource Bookshelves {
            get {
                return this.bookshelves;
            }
        }
        
        public class BookshelvesResource {
            
            private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
            
            private const string Resource = "mylibrary.bookshelves";
            
            private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(BookshelvesResource));
            
            private VolumesResource volumes;
            
            public BookshelvesResource(BooksService service) {
                this.service = service;
                this.volumes = new VolumesResource(service);
            }
            
            public virtual VolumesResource Volumes {
                get {
                    return this.volumes;
                }
            }
            
            /// <summary>Adds a volume to a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf to which to add a volume.</param>
            /// <param name="volumeId">Required - Id of volume to add.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream AddVolumeAsStream(string body, string shelf, string volumeId, string source) {
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.addVolume");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "addVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.addVolume");
                return ret;
            }
            
            /// <summary>Clears all volumes from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream ClearVolumesAsStream(string body, string shelf, string source) {
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.clearVolumes");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "clearVolumes", body, parameters);
                logger.Debug("Done Executing bookshelves.clearVolumes");
                return ret;
            }
            
            /// <summary>Retrieves a specific bookshelf belonging to the authenticated user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream GetAsStream(string shelf, string source) {
                string body = null;
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.get");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "get", body, parameters);
                logger.Debug("Done Executing bookshelves.get");
                return ret;
            }
            
            /// <summary>Retrieves a list of bookshelves belonging to the authenticated user.</summary>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream ListAsStream(string source) {
                string body = null;
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.list");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "list", body, parameters);
                logger.Debug("Done Executing bookshelves.list");
                return ret;
            }
            
            /// <summary>Removes a volume from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="volumeId">Required - Id of volume to remove.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream RemoveVolumeAsStream(string body, string shelf, string volumeId, string source) {
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.removeVolume");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "removeVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.removeVolume");
                return ret;
            }
            
            /// <summary>Adds a volume to a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf to which to add a volume.</param>
            /// <param name="volumeId">Required - Id of volume to add.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream AddVolume(string body, string shelf, string volumeId, string source) {
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.addVolume");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "addVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.addVolume");
                return ret;
            }
            
            /// <summary>Clears all volumes from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream ClearVolumes(string body, string shelf, string source) {
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.clearVolumes");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "clearVolumes", body, parameters);
                logger.Debug("Done Executing bookshelves.clearVolumes");
                return ret;
            }
            
            /// <summary>Retrieves a specific bookshelf belonging to the authenticated user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Google.Apis.Books.V1.Data.Bookshelf Get(string shelf, string source) {
                string body = null;
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.get");
                Google.Apis.Books.V1.Data.Bookshelf ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Bookshelf>(this.service.ExecuteRequest(BookshelvesResource.Resource, "get", body, parameters));
                logger.Debug("Done Executing bookshelves.get");
                return ret;
            }
            
            /// <summary>Retrieves a list of bookshelves belonging to the authenticated user.</summary>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Google.Apis.Books.V1.Data.Bookshelves List(string source) {
                string body = null;
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.list");
                Google.Apis.Books.V1.Data.Bookshelves ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Bookshelves>(this.service.ExecuteRequest(BookshelvesResource.Resource, "list", body, parameters));
                logger.Debug("Done Executing bookshelves.list");
                return ret;
            }
            
            /// <summary>Removes a volume from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="volumeId">Required - Id of volume to remove.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual System.IO.Stream RemoveVolume(string body, string shelf, string volumeId, string source) {
                System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.removeVolume");
                System.IO.Stream ret = this.service.ExecuteRequest(BookshelvesResource.Resource, "removeVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.removeVolume");
                return ret;
            }
            
            public class VolumesResource {
                
                private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
                
                private const string Resource = "mylibrary.bookshelves.volumes";
                
                private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(VolumesResource));
                
                public VolumesResource(BooksService service) {
                    this.service = service;
                }
                
                /// <summary>Gets volume information for volumes on a bookshelf.</summary>
                /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
                /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
                /// <param name="shelf">Optional - The bookshelf id or name retrieve volumes for.</param>
                /// <param name="source">Optional - String to identify the originator of this request.</param>
                /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first element to return (starts at 0)</param>
                public virtual System.IO.Stream ListAsStream(System.Int64? maxResults, Projection? projection, string shelf, string source, System.Int64? startIndex) {
                    string body = null;
                    System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                    parameters["maxResults"] = maxResults;
                    parameters["projection"] = projection;
                    parameters["shelf"] = shelf;
                    parameters["source"] = source;
                    parameters["startIndex"] = startIndex;
                    logger.Debug("Executing volumes.list");
                    System.IO.Stream ret = this.service.ExecuteRequest(VolumesResource.Resource, "list", body, parameters);
                    logger.Debug("Done Executing volumes.list");
                    return ret;
                }
                
                /// <summary>Gets volume information for volumes on a bookshelf.</summary>
                /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
                /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
                /// <param name="shelf">Optional - The bookshelf id or name retrieve volumes for.</param>
                /// <param name="source">Optional - String to identify the originator of this request.</param>
                /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first element to return (starts at 0)</param>
                public virtual Google.Apis.Books.V1.Data.Volumes List(System.Int64? maxResults, Projection? projection, string shelf, string source, System.Int64? startIndex) {
                    string body = null;
                    System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
                    parameters["maxResults"] = maxResults;
                    parameters["projection"] = projection;
                    parameters["shelf"] = shelf;
                    parameters["source"] = source;
                    parameters["startIndex"] = startIndex;
                    logger.Debug("Executing volumes.list");
                    Google.Apis.Books.V1.Data.Volumes ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Volumes>(this.service.ExecuteRequest(VolumesResource.Resource, "list", body, parameters));
                    logger.Debug("Done Executing volumes.list");
                    return ret;
                }
                
                /// <summary>Restrict information returned to a set of selected fields.</summary>
                [System.ComponentModel.TypeConverterAttribute(typeof(Google.Apis.Util.EnumStringValueTypeConverter))]
                public enum Projection {
                    
                    /// <summary>Includes all volume data.</summary>
                    [Google.Apis.Util.StringValueAttribute("full")]
                    Full,
                    
                    /// <summary>Includes a subset of fields in volumeInfo and accessInfo.</summary>
                    [Google.Apis.Util.StringValueAttribute("lite")]
                    Lite,
                }
            }
        }
    }
    
    public class VolumesResource {
        
        private Google.Apis.Discovery.ISchemaAwareRequestExecutor service;
        
        private const string Resource = "volumes";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(VolumesResource));
        
        public VolumesResource(BooksService service) {
            this.service = service;
        }
        
        /// <summary>Gets volume information for a single volume.</summary>
        /// <param name="volumeId">Required - Id of volume to retrieve.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual System.IO.Stream GetAsStream(string volumeId, Projection? projection, string source) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["volumeId"] = volumeId;
            parameters["projection"] = projection;
            parameters["source"] = source;
            logger.Debug("Executing volumes.get");
            System.IO.Stream ret = this.service.ExecuteRequest(VolumesResource.Resource, "get", body, parameters);
            logger.Debug("Done Executing volumes.get");
            return ret;
        }
        
        /// <summary>Performs a book search.</summary>
        /// <param name="q">Required - Full-text search query string.</param>
        /// <param name="download">Optional - Must be one of the following values [epub] - Restrict to volumes by download availability.</param>
        /// <param name="filter">Optional - Must be one of the following values [ebooks, free-ebooks, full, paid-ebooks, partial] - Filter search results.</param>
        /// <param name="langRestrict">Optional - Restrict results to books with this language code.</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 40 - Maximum number of results to return.</param>
        /// <param name="orderBy">Optional - Must be one of the following values [newest, relevance] - Sort search results.</param>
        /// <param name="printType">Optional - Must be one of the following values [all, books, magazines] - Restrict to books or magazines.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first result to return (starts at 0)</param>
        public virtual System.IO.Stream ListAsStream(string q, Download? download, Filter? filter, string langRestrict, System.Int64? maxResults, OrderBy? orderBy, PrintType? printType, Projection? projection, string source, System.Int64? startIndex) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["q"] = q;
            parameters["download"] = download;
            parameters["filter"] = filter;
            parameters["langRestrict"] = langRestrict;
            parameters["maxResults"] = maxResults;
            parameters["orderBy"] = orderBy;
            parameters["printType"] = printType;
            parameters["projection"] = projection;
            parameters["source"] = source;
            parameters["startIndex"] = startIndex;
            logger.Debug("Executing volumes.list");
            System.IO.Stream ret = this.service.ExecuteRequest(VolumesResource.Resource, "list", body, parameters);
            logger.Debug("Done Executing volumes.list");
            return ret;
        }
        
        /// <summary>Gets volume information for a single volume.</summary>
        /// <param name="volumeId">Required - Id of volume to retrieve.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Google.Apis.Books.V1.Data.Volume Get(string volumeId, Projection? projection, string source) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["volumeId"] = volumeId;
            parameters["projection"] = projection;
            parameters["source"] = source;
            logger.Debug("Executing volumes.get");
            Google.Apis.Books.V1.Data.Volume ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Volume>(this.service.ExecuteRequest(VolumesResource.Resource, "get", body, parameters));
            logger.Debug("Done Executing volumes.get");
            return ret;
        }
        
        /// <summary>Performs a book search.</summary>
        /// <param name="q">Required - Full-text search query string.</param>
        /// <param name="download">Optional - Must be one of the following values [epub] - Restrict to volumes by download availability.</param>
        /// <param name="filter">Optional - Must be one of the following values [ebooks, free-ebooks, full, paid-ebooks, partial] - Filter search results.</param>
        /// <param name="langRestrict">Optional - Restrict results to books with this language code.</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 40 - Maximum number of results to return.</param>
        /// <param name="orderBy">Optional - Must be one of the following values [newest, relevance] - Sort search results.</param>
        /// <param name="printType">Optional - Must be one of the following values [all, books, magazines] - Restrict to books or magazines.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first result to return (starts at 0)</param>
        public virtual Google.Apis.Books.V1.Data.Volumes List(string q, Download? download, Filter? filter, string langRestrict, System.Int64? maxResults, OrderBy? orderBy, PrintType? printType, Projection? projection, string source, System.Int64? startIndex) {
            string body = null;
            System.Collections.Generic.Dictionary<string, object> parameters = new System.Collections.Generic.Dictionary<string, object>();
            parameters["q"] = q;
            parameters["download"] = download;
            parameters["filter"] = filter;
            parameters["langRestrict"] = langRestrict;
            parameters["maxResults"] = maxResults;
            parameters["orderBy"] = orderBy;
            parameters["printType"] = printType;
            parameters["projection"] = projection;
            parameters["source"] = source;
            parameters["startIndex"] = startIndex;
            logger.Debug("Executing volumes.list");
            Google.Apis.Books.V1.Data.Volumes ret = this.service.JsonToObject<Google.Apis.Books.V1.Data.Volumes>(this.service.ExecuteRequest(VolumesResource.Resource, "list", body, parameters));
            logger.Debug("Done Executing volumes.list");
            return ret;
        }
        
        /// <summary>Restrict information returned to a set of selected fields.</summary>
        [System.ComponentModel.TypeConverterAttribute(typeof(Google.Apis.Util.EnumStringValueTypeConverter))]
        public enum Projection {
            
            /// <summary>Includes all volume data.</summary>
            [Google.Apis.Util.StringValueAttribute("full")]
            Full,
            
            /// <summary>Includes a subset of fields in volumeInfo and accessInfo.</summary>
            [Google.Apis.Util.StringValueAttribute("lite")]
            Lite,
        }
        
        /// <summary>Restrict to volumes by download availability.</summary>
        [System.ComponentModel.TypeConverterAttribute(typeof(Google.Apis.Util.EnumStringValueTypeConverter))]
        public enum Download {
            
            /// <summary>All volumes with epub.</summary>
            [Google.Apis.Util.StringValueAttribute("epub")]
            Epub,
        }
        
        /// <summary>Filter search results.</summary>
        [System.ComponentModel.TypeConverterAttribute(typeof(Google.Apis.Util.EnumStringValueTypeConverter))]
        public enum Filter {
            
            /// <summary>All Google eBooks.</summary>
            [Google.Apis.Util.StringValueAttribute("ebooks")]
            Ebooks,
            
            /// <summary>Google eBook with full volume text viewability.</summary>
            [Google.Apis.Util.StringValueAttribute("free-ebooks")]
            FreeEbooks,
            
            /// <summary>Public can view entire volume text.</summary>
            [Google.Apis.Util.StringValueAttribute("full")]
            Full,
            
            /// <summary>Google eBook with a price.</summary>
            [Google.Apis.Util.StringValueAttribute("paid-ebooks")]
            PaidEbooks,
            
            /// <summary>Public able to see parts of text.</summary>
            [Google.Apis.Util.StringValueAttribute("partial")]
            Partial,
        }
        
        /// <summary>Sort search results.</summary>
        [System.ComponentModel.TypeConverterAttribute(typeof(Google.Apis.Util.EnumStringValueTypeConverter))]
        public enum OrderBy {
            
            /// <summary>Most recently published.</summary>
            [Google.Apis.Util.StringValueAttribute("newest")]
            Newest,
            
            /// <summary>Relevance to search terms.</summary>
            [Google.Apis.Util.StringValueAttribute("relevance")]
            Relevance,
        }
        
        /// <summary>Restrict to books or magazines.</summary>
        [System.ComponentModel.TypeConverterAttribute(typeof(Google.Apis.Util.EnumStringValueTypeConverter))]
        public enum PrintType {
            
            /// <summary>All volume content types.</summary>
            [Google.Apis.Util.StringValueAttribute("all")]
            All,
            
            /// <summary>Just books.</summary>
            [Google.Apis.Util.StringValueAttribute("books")]
            Books,
            
            /// <summary>Just magazines.</summary>
            [Google.Apis.Util.StringValueAttribute("magazines")]
            Magazines,
        }
    }
}
