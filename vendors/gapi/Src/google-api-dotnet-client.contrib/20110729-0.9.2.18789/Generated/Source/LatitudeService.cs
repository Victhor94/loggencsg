//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Google.Apis.Latitude.V1.Data {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    
    
    /// <summary>A Location Resource identifies a user&apos;s position at a particular time. It may include metadata about the user&apos;s position, such as a venue if the location was recorded at the time of a check-in.</summary>
    public class LatitudeCurrentlocationResourceJson : Google.Apis.Requests.IDirectResponseSchema {
        
        private string accuracy;
        
        private string activityId;
        
        private string altitude;
        
        private string altitudeAccuracy;
        
        private string heading;
        
        private string kind;
        
        private string latitude;
        
        private string longitude;
        
        private string placeid;
        
        private string speed;
        
        private string timestampMs;
        
        private Google.Apis.Requests.RequestError error;
        
        private string eTag;
        
        /// <summary>Accuracy of the latitude and longitude coordinates, in non-negative meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accuracy")]
        public virtual string Accuracy {
            get {
                return this.accuracy;
            }
            set {
                this.accuracy = value;
            }
        }
        
        /// <summary>Unique ID of the Buzz message that corresponds to the check-in associated with this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("activityId")]
        public virtual string ActivityId {
            get {
                return this.activityId;
            }
            set {
                this.activityId = value;
            }
        }
        
        /// <summary>Altitude of the location, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitude")]
        public virtual string Altitude {
            get {
                return this.altitude;
            }
            set {
                this.altitude = value;
            }
        }
        
        /// <summary>Accuracy of the altitude value, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitudeAccuracy")]
        public virtual string AltitudeAccuracy {
            get {
                return this.altitudeAccuracy;
            }
            set {
                this.altitudeAccuracy = value;
            }
        }
        
        /// <summary>Direction of travel of the user when this location was recorded. In degrees, clockwise relative to true north. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("heading")]
        public virtual string Heading {
            get {
                return this.heading;
            }
            set {
                this.heading = value;
            }
        }
        
        /// <summary>Kind of this item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Latitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latitude")]
        public virtual string Latitude {
            get {
                return this.latitude;
            }
            set {
                this.latitude = value;
            }
        }
        
        /// <summary>Longitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("longitude")]
        public virtual string Longitude {
            get {
                return this.longitude;
            }
            set {
                this.longitude = value;
            }
        }
        
        /// <summary>Unique ID of the venue that corresponds to this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("placeid")]
        public virtual string Placeid {
            get {
                return this.placeid;
            }
            set {
                this.placeid = value;
            }
        }
        
        /// <summary>Ground speed of the user at the time this location was recorded, in meters per second. Non-negative. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("speed")]
        public virtual string Speed {
            get {
                return this.speed;
            }
            set {
                this.speed = value;
            }
        }
        
        /// <summary>Timestamp of the Location Resource, in milliseconds since the epoch (UTC). This is also the Location Resource&apos;s unique id.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timestampMs")]
        public virtual string TimestampMs {
            get {
                return this.timestampMs;
            }
            set {
                this.timestampMs = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public virtual string ETag {
            get {
                return this.eTag;
            }
            set {
                this.eTag = value;
            }
        }
    }
    
    /// <summary>A Location Resource identifies a user&apos;s position at a particular time. It may include metadata about the user&apos;s position, such as a venue if the location was recorded at the time of a check-in.</summary>
    public class Location : Google.Apis.Requests.IDirectResponseSchema {
        
        private string accuracy;
        
        private string activityId;
        
        private string altitude;
        
        private string altitudeAccuracy;
        
        private string heading;
        
        private string kind;
        
        private string latitude;
        
        private string longitude;
        
        private string placeid;
        
        private string speed;
        
        private string timestampMs;
        
        private Google.Apis.Requests.RequestError error;
        
        private string eTag;
        
        /// <summary>Accuracy of the latitude and longitude coordinates, in non-negative meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("accuracy")]
        public virtual string Accuracy {
            get {
                return this.accuracy;
            }
            set {
                this.accuracy = value;
            }
        }
        
        /// <summary>Unique ID of the Buzz message that corresponds to the check-in associated with this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("activityId")]
        public virtual string ActivityId {
            get {
                return this.activityId;
            }
            set {
                this.activityId = value;
            }
        }
        
        /// <summary>Altitude of the location, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitude")]
        public virtual string Altitude {
            get {
                return this.altitude;
            }
            set {
                this.altitude = value;
            }
        }
        
        /// <summary>Accuracy of the altitude value, in meters. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("altitudeAccuracy")]
        public virtual string AltitudeAccuracy {
            get {
                return this.altitudeAccuracy;
            }
            set {
                this.altitudeAccuracy = value;
            }
        }
        
        /// <summary>Direction of travel of the user when this location was recorded. In degrees, clockwise relative to true north. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("heading")]
        public virtual string Heading {
            get {
                return this.heading;
            }
            set {
                this.heading = value;
            }
        }
        
        /// <summary>Kind of this item.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        /// <summary>Latitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("latitude")]
        public virtual string Latitude {
            get {
                return this.latitude;
            }
            set {
                this.latitude = value;
            }
        }
        
        /// <summary>Longitude of the location, in decimal degrees.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("longitude")]
        public virtual string Longitude {
            get {
                return this.longitude;
            }
            set {
                this.longitude = value;
            }
        }
        
        /// <summary>Unique ID of the venue that corresponds to this location. Available only for check-in locations. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("placeid")]
        public virtual string Placeid {
            get {
                return this.placeid;
            }
            set {
                this.placeid = value;
            }
        }
        
        /// <summary>Ground speed of the user at the time this location was recorded, in meters per second. Non-negative. Optional.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("speed")]
        public virtual string Speed {
            get {
                return this.speed;
            }
            set {
                this.speed = value;
            }
        }
        
        /// <summary>Timestamp of the Location Resource, in milliseconds since the epoch (UTC). This is also the Location Resource&apos;s unique id.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timestampMs")]
        public virtual string TimestampMs {
            get {
                return this.timestampMs;
            }
            set {
                this.timestampMs = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public virtual string ETag {
            get {
                return this.eTag;
            }
            set {
                this.eTag = value;
            }
        }
    }
    
    public class LocationFeed : Google.Apis.Requests.IDirectResponseSchema {
        
        private IList<Location> items;
        
        private string kind;
        
        private Google.Apis.Requests.RequestError error;
        
        private string eTag;
        
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual IList<Location> Items {
            get {
                return this.items;
            }
            set {
                this.items = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("kind")]
        public virtual string Kind {
            get {
                return this.kind;
            }
            set {
                this.kind = value;
            }
        }
        
        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual Google.Apis.Requests.RequestError Error {
            get {
                return this.error;
            }
            set {
                this.error = value;
            }
        }
        
        public virtual string ETag {
            get {
                return this.eTag;
            }
            set {
                this.eTag = value;
            }
        }
    }
}
namespace Google.Apis.Latitude.V1 {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public class LatitudeService : Google.Apis.Discovery.IRequestProvider {
        
        private Google.Apis.Discovery.IService genericService;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Version = "v1";
        
        private const string Name = "latitude";
        
        private const string BaseUri = "https://www.googleapis.com/latitude/v1/";
        
        private const Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_1_0;
        
        private string developerKey;
        
        private CurrentLocationResource currentLocation;
        
        private LocationResource location;
        
        public LatitudeService(Google.Apis.Discovery.IService genericService, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.genericService = genericService;
            this.authenticator = authenticator;
            this.currentLocation = new CurrentLocationResource(this);
            this.location = new LocationResource(this);
        }
        
        public LatitudeService() : 
                this(new Google.Apis.Discovery.DiscoveryService(new Google.Apis.Discovery.CachedWebDiscoveryDevice(new System.Uri(string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", LatitudeService.Name, LatitudeService.Version)))).GetService(LatitudeService.Version, LatitudeService.DiscoveryVersionUsed, new Google.Apis.Discovery.FactoryParameterV1_0(new System.Uri(LatitudeService.BaseUri))), Google.Apis.Authentication.AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {
        }
        
        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey {
            get {
                return this.developerKey;
            }
            set {
                this.developerKey = value;
            }
        }
        
        public virtual CurrentLocationResource CurrentLocation {
            get {
                return this.currentLocation;
            }
        }
        
        public virtual LocationResource Location {
            get {
                return this.location;
            }
        }
        
        public virtual Google.Apis.Requests.IRequest CreateRequest(string resource, string method) {
            Google.Apis.Requests.IRequest request = this.genericService.CreateRequest(resource, method);
            if (!string.IsNullOrEmpty(DeveloperKey)) {
                request = request.WithDeveloperKey(this.DeveloperKey);
            }
            return request.WithAuthentication(authenticator);
        }
        
        public virtual void RegisterSerializer(Google.Apis.ISerializer serializer) {
            genericService.Serializer = serializer;
        }
        
        public virtual string SerializeObject(object obj) {
            return genericService.SerializeRequest(obj);
        }
        
        public virtual T DeserializeResponse<T>(Google.Apis.Requests.IResponse response)
         {
            return genericService.DeserializeResponse<T>(response);
        }
    }
    
    public class CurrentLocationResource {
        
        private Google.Apis.Discovery.IRequestProvider service;
        
        private const string Resource = "currentLocation";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(CurrentLocationResource));
        
        public CurrentLocationResource(LatitudeService service) {
            this.service = service;
        }
        
        /// <summary>Deletes the authenticated user&apos;s current location.</summary>
        public virtual DeleteRequest Delete() {
            return new DeleteRequest(service);
        }
        
        /// <summary>Returns the authenticated user&apos;s current location.</summary>
        public virtual GetRequest Get() {
            return new GetRequest(service);
        }
        
        /// <summary>Returns the authenticated user&apos;s current location.</summary>
        /// <param name="granularity">Optional - Granularity of the requested location.</param>
        public virtual GetRequest Get([System.Runtime.InteropServices.OptionalAttribute()] string granularity) {
            return new GetRequest(service, granularity);
        }
        
        /// <summary>Updates or creates the user&apos;s current location.</summary>
        public virtual InsertRequest Insert(Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson body) {
            return new InsertRequest(service, body);
        }
        
        public class DeleteRequest : Google.Apis.Requests.ServiceRequest<string> {
            
            public DeleteRequest(Google.Apis.Discovery.IRequestProvider service) : 
                    base(service) {
            }
            
            protected override string ResourceName {
                get {
                    return "currentLocation";
                }
            }
            
            protected override string MethodName {
                get {
                    return "delete";
                }
            }
        }
        
        public class GetRequest : Google.Apis.Requests.ServiceRequest<Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson> {
            
            private string granularity;
            
            public GetRequest(Google.Apis.Discovery.IRequestProvider service) : 
                    base(service) {
            }
            
            public GetRequest(Google.Apis.Discovery.IRequestProvider service, [System.Runtime.InteropServices.OptionalAttribute()] string granularity) : 
                    base(service) {
                this.granularity = granularity;
            }
            
            /// <summary>Granularity of the requested location.</summary>
            [Google.Apis.Util.RequestParameterAttribute("granularity")]
            public virtual string Granularity {
                get {
                    return this.granularity;
                }
                set {
                    this.granularity = value;
                }
            }
            
            protected override string ResourceName {
                get {
                    return "currentLocation";
                }
            }
            
            protected override string MethodName {
                get {
                    return "get";
                }
            }
        }
        
        public class InsertRequest : Google.Apis.Requests.ServiceRequest<Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson> {
            
            private Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson bodyValue;
            
            public InsertRequest(Google.Apis.Discovery.IRequestProvider service, Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson body) : 
                    base(service) {
                this.Body = body;
            }
            
            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Google.Apis.Latitude.V1.Data.LatitudeCurrentlocationResourceJson Body {
                get {
                    return this.bodyValue;
                }
                set {
                    this.bodyValue = value;
                }
            }
            
            protected override string ResourceName {
                get {
                    return "currentLocation";
                }
            }
            
            protected override string MethodName {
                get {
                    return "insert";
                }
            }
            
            protected override object GetBody() {
                return this.Body;
            }
        }
    }
    
    public class LocationResource {
        
        private Google.Apis.Discovery.IRequestProvider service;
        
        private const string Resource = "location";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LocationResource));
        
        public LocationResource(LatitudeService service) {
            this.service = service;
        }
        
        /// <summary>Deletes a location from the user&apos;s location history.</summary>
        /// <param name="locationId">Required - Timestamp of the location to delete (ms since epoch).</param>
        public virtual DeleteRequest Delete(string locationId) {
            return new DeleteRequest(service, locationId);
        }
        
        /// <summary>Reads a location from the user&apos;s location history.</summary>
        /// <param name="locationId">Required - Timestamp of the location to read (ms since epoch).</param>
        public virtual GetRequest Get(string locationId) {
            return new GetRequest(service, locationId);
        }
        
        /// <summary>Reads a location from the user&apos;s location history.</summary>
        /// <param name="locationId">Required - Timestamp of the location to read (ms since epoch).</param>
        /// <param name="granularity">Optional - Granularity of the location to return.</param>
        public virtual GetRequest Get(string locationId, [System.Runtime.InteropServices.OptionalAttribute()] string granularity) {
            return new GetRequest(service, locationId, granularity);
        }
        
        /// <summary>Inserts or updates a location in the user&apos;s location history.</summary>
        public virtual InsertRequest Insert(Google.Apis.Latitude.V1.Data.Location body) {
            return new InsertRequest(service, body);
        }
        
        /// <summary>Lists the user&apos;s location history.</summary>
        public virtual ListRequest List() {
            return new ListRequest(service);
        }
        
        /// <summary>Lists the user&apos;s location history.</summary>
        /// <param name="granularity">Optional - Granularity of the requested locations.</param>
        /// <param name="maxResults">max-results - Optional - Maximum number of locations to return.</param>
        /// <param name="maxTime">max-time - Optional - Maximum timestamp of locations to return (ms since epoch).</param>
        /// <param name="minTime">min-time - Optional - Minimum timestamp of locations to return (ms since epoch).</param>
        public virtual ListRequest List([System.Runtime.InteropServices.OptionalAttribute()] string granularity, [System.Runtime.InteropServices.OptionalAttribute()] string maxResults, [System.Runtime.InteropServices.OptionalAttribute()] string maxTime, [System.Runtime.InteropServices.OptionalAttribute()] string minTime) {
            return new ListRequest(service, granularity, maxResults, maxTime, minTime);
        }
        
        public class DeleteRequest : Google.Apis.Requests.ServiceRequest<string> {
            
            private string locationId;
            
            public DeleteRequest(Google.Apis.Discovery.IRequestProvider service, string locationId) : 
                    base(service) {
                this.locationId = locationId;
            }
            
            /// <summary>Timestamp of the location to delete (ms since epoch).</summary>
            [Google.Apis.Util.RequestParameterAttribute("locationId")]
            public virtual string LocationId {
                get {
                    return this.locationId;
                }
            }
            
            protected override string ResourceName {
                get {
                    return "location";
                }
            }
            
            protected override string MethodName {
                get {
                    return "delete";
                }
            }
        }
        
        public class GetRequest : Google.Apis.Requests.ServiceRequest<Google.Apis.Latitude.V1.Data.Location> {
            
            private string granularity;
            
            private string locationId;
            
            public GetRequest(Google.Apis.Discovery.IRequestProvider service, string locationId) : 
                    base(service) {
                this.locationId = locationId;
            }
            
            public GetRequest(Google.Apis.Discovery.IRequestProvider service, string locationId, [System.Runtime.InteropServices.OptionalAttribute()] string granularity) : 
                    base(service) {
                this.locationId = locationId;
                this.granularity = granularity;
            }
            
            /// <summary>Granularity of the location to return.</summary>
            [Google.Apis.Util.RequestParameterAttribute("granularity")]
            public virtual string Granularity {
                get {
                    return this.granularity;
                }
                set {
                    this.granularity = value;
                }
            }
            
            /// <summary>Timestamp of the location to read (ms since epoch).</summary>
            [Google.Apis.Util.RequestParameterAttribute("locationId")]
            public virtual string LocationId {
                get {
                    return this.locationId;
                }
            }
            
            protected override string ResourceName {
                get {
                    return "location";
                }
            }
            
            protected override string MethodName {
                get {
                    return "get";
                }
            }
        }
        
        public class InsertRequest : Google.Apis.Requests.ServiceRequest<Google.Apis.Latitude.V1.Data.Location> {
            
            private Google.Apis.Latitude.V1.Data.Location bodyValue;
            
            public InsertRequest(Google.Apis.Discovery.IRequestProvider service, Google.Apis.Latitude.V1.Data.Location body) : 
                    base(service) {
                this.Body = body;
            }
            
            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Google.Apis.Latitude.V1.Data.Location Body {
                get {
                    return this.bodyValue;
                }
                set {
                    this.bodyValue = value;
                }
            }
            
            protected override string ResourceName {
                get {
                    return "location";
                }
            }
            
            protected override string MethodName {
                get {
                    return "insert";
                }
            }
            
            protected override object GetBody() {
                return this.Body;
            }
        }
        
        public class ListRequest : Google.Apis.Requests.ServiceRequest<Google.Apis.Latitude.V1.Data.LocationFeed> {
            
            private string granularity;
            
            private string maxResults;
            
            private string maxTime;
            
            private string minTime;
            
            public ListRequest(Google.Apis.Discovery.IRequestProvider service) : 
                    base(service) {
            }
            
            public ListRequest(Google.Apis.Discovery.IRequestProvider service, [System.Runtime.InteropServices.OptionalAttribute()] string granularity, [System.Runtime.InteropServices.OptionalAttribute()] string maxResults, [System.Runtime.InteropServices.OptionalAttribute()] string maxTime, [System.Runtime.InteropServices.OptionalAttribute()] string minTime) : 
                    base(service) {
                this.granularity = granularity;
                this.maxResults = maxResults;
                this.maxTime = maxTime;
                this.minTime = minTime;
            }
            
            /// <summary>Granularity of the requested locations.</summary>
            [Google.Apis.Util.RequestParameterAttribute("granularity")]
            public virtual string Granularity {
                get {
                    return this.granularity;
                }
                set {
                    this.granularity = value;
                }
            }
            
            /// <summary>Maximum number of locations to return.</summary>
            [Google.Apis.Util.RequestParameterAttribute("max-results")]
            public virtual string MaxResults {
                get {
                    return this.maxResults;
                }
                set {
                    this.maxResults = value;
                }
            }
            
            /// <summary>Maximum timestamp of locations to return (ms since epoch).</summary>
            [Google.Apis.Util.RequestParameterAttribute("max-time")]
            public virtual string MaxTime {
                get {
                    return this.maxTime;
                }
                set {
                    this.maxTime = value;
                }
            }
            
            /// <summary>Minimum timestamp of locations to return (ms since epoch).</summary>
            [Google.Apis.Util.RequestParameterAttribute("min-time")]
            public virtual string MinTime {
                get {
                    return this.minTime;
                }
                set {
                    this.minTime = value;
                }
            }
            
            protected override string ResourceName {
                get {
                    return "location";
                }
            }
            
            protected override string MethodName {
                get {
                    return "list";
                }
            }
        }
    }
}
